{
	"whodoesthat.configuration.config_folder": "Config Folder",
	"whodoesthat.configuration.config_folder.tooltip": "Where to look for the descriptor configs",

	"whodoesthat.configuration.include_files": "Include Files",
	"whodoesthat.configuration.include_files.tooltip": "If enabled the json report will include a file listing of each mod. This can be useful for debugging, but the report might get extremely large.",

	"whodoesthat.configuration.include_classes": "Include Classes",
	"whodoesthat.configuration.include_classes.tooltip": "If enabled the json report will include class information from the mods. This provides more detailed technical information but increases report size.",

	"whodoesthat.configuration.include_methods": "Include Methods",
	"whodoesthat.configuration.include_methods.tooltip": "If enabled the json report will include method information for all classes. This provides very detailed technical information of classes but significantly increases report size.",

	"whodoesthat.configuration.include_fields": "Include Fields",
	"whodoesthat.configuration.include_fields.tooltip": "If enabled the json report will include field information for all classes. This provides detailed property information of classes but increases report size.",

	"whodoesthat.configuration.include_annotations": "Include Annotations",
	"whodoesthat.configuration.include_annotations.tooltip": "If enabled the json report will include annotation information for classes, methods and fields. This provides metadata about code elements but increases report size.",

	"whodoesthat.configuration.include_analysis": "Include Analysis",
	"whodoesthat.configuration.include_analysis.tooltip": "If enabled the json report will include analysis information. This provides key insights about mods and is enabled by default.",

	"whodoesthat.configuration.include_tags": "Include Tags",
	"whodoesthat.configuration.include_tags.tooltip": "If enabled the json report will include tag information. This helps categorize and group related elements and is enabled by default.",

	"whodoesthat.configuration.include_summary": "Include Summary",
	"whodoesthat.configuration.include_summary.tooltip": "If enabled the json report will include summary information. This provides an overview of the analysis results and is enabled by default.",

	"whodoesthat.configuration.json_target": "JSON Destination",
	"whodoesthat.configuration.json_target.tooltip": "In which file to store the full data as JSON",

	"whodoesthat.configuration.show_classes_for_all_rights_reserved_mods": "Enable Closed Source Inspection",
	"whodoesthat.configuration.show_classes_for_all_rights_reserved_mods.tooltip": "You can inspect the classes of mods that are not open source. This is useful for debugging, but the mod authors did not intend for you to see this data.\n\nThis option is disabled by default, because it can be used to reverse engineer mods. If you enable this option, you are responsible for your actions.\n\nIf you want to use this option, please consider asking the mod author for permission first.",

	"whodoesthat.configuration.menu_dock_side": "Menu Dock Position",
	"whodoesthat.configuration.menu_dock_side.tooltip": "Which corner of the screen to attach the menu to.",

	"whodoesthat.configuration.menu_screen_class": "Screen to attach menu to",
	"whodoesthat.configuration.menu_screen_class.tooltip": "Which screen to show the menu on.",

	"whodoesthat.configuration.additional_paths": "Extra Paths",
	"whodoesthat.configuration.additional_paths.tooltip": "Additional paths to scan for mods.",

	"whodoesthat.configuration.generate_now": "Run analysis now",
	"whodoesthat.configuration.generate_now.button": "Do it!",
	"whodoesthat.configuration.generate_now.success": "Success",
	"whodoesthat.configuration.generate_now.success.tooltip": "Analysis of %d mods took %dms",

	"whodoesthat.configuration.generate_now.errors": "Error",
	"whodoesthat.configuration.generate_now.tooltip": "Runs the analysis and saves the results",

	"whodoesthat.configuration.show": "Show last results",
	"whodoesthat.configuration.show.button": "Open screen",
	"whodoesthat.configuration.show.tooltip": "Opens the screen with the last analysis results",

	"whodoesthat.configuration.paths": "Paths",
	"whodoesthat.configuration.paths.tooltip": "Configure the paths to scan for mods, where to write reports to and other path related settings",

	"whodoesthat.configuration.report": "Analysis",
	"whodoesthat.configuration.report.tooltip": "Configure content included in the json report",

	"whodoesthat.configuration.gui": "Interface",
	"whodoesthat.configuration.gui.tooltip": "Configure the GUI and loading menu",

	"whodoesthat.configuration.mod_blacklist": "Mod Blacklist",
	"whodoesthat.configuration.mod_blacklist.tooltip": "List of mods to ignore during analysis",

	"whodoesthat.gui.modlist_inject.show_overview.ready.tooltip": "Show a detailed, filterable overview of all mods",
	"whodoesthat.gui.modlist_inject.show_overview.not_ready.tooltip": "The analysis is still running in the background. Please wait a few moments.",

	"whodoesthat.gui.filter_entry.must.tooltip": "Must have!",
	"whodoesthat.gui.filter_entry.not.tooltip": "Forbidden!",
	"whodoesthat.gui.filter_entry.whatever.tooltip": "Ignore this",

	"whodoesthat.gui.search.case_sensitive": "Search Case Sensitive",
	"whodoesthat.gui.search.regex": "Use Regular Expression Search",
	"whodoesthat.gui.search.localizations": "Include translations in search",
	"whodoesthat.gui.search.files": "Include file names in search",
	"whodoesthat.gui.search.classes": "Include class names in search",

	"whodoesthat.gui.modloader.fabric": "Fabric Mod",
	"whodoesthat.gui.modloader.forge": "(Neo)Forge Mod",
	"whodoesthat.gui.opensource": "Open Source",
	"whodoesthat.gui.closedsource": "Closed Source",

	"whodoesthat.gui.closedsource.disclaimer_1": "We could not detect an open source license for the mod %s. This means that the mod authors do not want you to see the source code. Since decompiling and reverse engineering the mod is against the mod authors' wishes, WhoDoesThat will not show you the classes of this mod.",
	"whodoesthat.gui.closedsource.disclaimer_2": "If you want to see the classes, please ask the mod authors for permission first.",
	"whodoesthat.gui.closedsource.disclaimer_checkbox_1": "I have read the disclaimer",
	"whodoesthat.gui.closedsource.disclaimer_checkbox_2": "I am aware of the consequences",
	"whodoesthat.gui.closedsource.disclaimer_checkbox_3": "I got permission from the mod authors",
	"whodoesthat.gui.closedsource.disclaimer_checkbox_4": "I will not use this information maliciously",
	"whodoesthat.gui.closedsource.disclaimer_confirm": "I am responsible for my own actions",

	"whodoesthat.gui.matrix.title": "Mod Matrix",
	"whodoesthat.gui.overview.title": "Mod Overview",

	"whodoesthat.gui.filter": "Filters",
	"whodoesthat.gui.mods": "Matching Mods",
	"whodoesthat.gui.summary": "Summary",
	"whodoesthat.gui.events": "Events being listened to",
	"whodoesthat.gui.mixins": "Modified Classes via Mixins",
	"whodoesthat.gui.dependencies": "Dependencies",
	"whodoesthat.gui.dependencies_suggested": "Optional Dependencies",
	"whodoesthat.gui.lib_for": "Required by",
	"whodoesthat.gui.inheritance": "Inheritance",
	"whodoesthat.gui.files": "Files",
	"whodoesthat.gui.classes": "Classes",

	"whodoesthat.gui.modwidget.authors": "By: §7%s§r",
	"whodoesthat.gui.modwidget.modid": "ID: §7%s§r",
	"whodoesthat.gui.modwidget.file": "File: §7%s§r",
	"whodoesthat.gui.modwidget.sha1": "SHA-1: §7%s§r",
	"whodoesthat.gui.modwidget.jarinjar": "Nested: §7%s§r",


	"whodoesthat.gui.tag.tooltip": "The mod matches one of",
	"whodoesthat.gui.jarinjar.tooltip": "The mod is part of multi-mod jar:",
	"whodoesthat.gui.embeddedjar.tooltip": "The mod embeds additional jars:",

	"whodoesthat.gui.jars_scanned.tooltip": "Found %d jars",
	"whodoesthat.gui.jars_analyzed.tooltip": "Analyzed %d jars",
	"whodoesthat.gui.mods_found.tooltip": "Found %d mods",

	"whodoesthat.gui.files.overflow.label": "Too many childen to expand.",
	"whodoesthat.gui.files.overflow.tooltip": "The folder contains %d files.",

	"whodoesthat.gui.dependencies.label": "The mod depends on",
	"whodoesthat.gui.optional_dependencies.label": "The mod suggests",
	"whodoesthat.gui.reverse_dependencies.label": "The mod is required by",

	"whodoesthat.gui.inheritance.tooltip": "Class §b%s§r inherits from",

	"whodoesthat.gui.descriptors.calls.label": "Method calls",
	"whodoesthat.gui.descriptors.calls.tooltip": "The mod calls Java methods matching §b%s§r",

	"whodoesthat.gui.descriptors.types.label": "Used Types",
	"whodoesthat.gui.descriptors.types.tooltip": "The mod uses Java types matching §b%s§r",

	"whodoesthat.gui.descriptors.inheritance.label": "Inheritance",
	"whodoesthat.gui.descriptors.inheritance.tooltip": "The mod has Java classes that inherit from §b%s§r",

	"whodoesthat.gui.descriptors.mixins.label": "Code Mixin",
	"whodoesthat.gui.descriptors.mixins.tooltip": "The mod uses Mixins to modify §b%s§r",
	"whodoesthat.gui.descriptors.mixins.tooltip_detailed": "The class §b%s§r modifies class §b%s§r.\n§7These fields and methods are involved:§r",

	"whodoesthat.gui.descriptors.events.label": "Event Listener",
	"whodoesthat.gui.descriptors.events.tooltip": "The mod listens to §b%s§r events",

	"whodoesthat.gui.descriptors.files.label": "Resource File",
	"whodoesthat.gui.descriptors.files.tooltip": "The mod contains files matching §b%s§r",

	"whodoesthat.gui.descriptors.fields.label": "Java Field",
	"whodoesthat.gui.descriptors.fields.tooltip": "The mod has Java classes with fields of type §b%s§r",

	"whodoesthat.gui.descriptors.annotations.label": "Java Annotation",
	"whodoesthat.gui.descriptors.annotations.tooltip": "The mod has Java elements annotated with §b%s§r",

	"whodoesthat.gui.categories.tags.label": "Tags",
	"whodoesthat.gui.categories.content_json.label": "JSON based content",
	"whodoesthat.gui.categories.custom_content.label": "Code based content",
	"whodoesthat.gui.categories.custom_textures.label": "Custom Textures",
	"whodoesthat.gui.categories.entity_events.label": "Entity Events",
	"whodoesthat.gui.categories.gui_events.label": "GUI Listeners",
	"whodoesthat.gui.categories.meta_systems.label": "Usage of Systems",
	"whodoesthat.gui.categories.mod_compatibility.label": "Mod Plugins",
	"whodoesthat.gui.categories.render_events.label": "Render Listeners",
	"whodoesthat.gui.categories.tick_events.label": "Ticker",
	"whodoesthat.gui.categories.world_events.label": "World Events",
	"whodoesthat.gui.categories.worldgen_json.label": "World Generation",
	"whodoesthat.gui.categories.action_events.label": "Action Events",
	"whodoesthat.gui.categories.chat_events.label": "Chat Events",
	"whodoesthat.gui.categories.code_modifications.label": "Code Modifications",
	"whodoesthat.gui.categories.game_events.label": "Game Events",
	"whodoesthat.gui.categories.mcfunctions.label": "Minecraft Functions",
	"whodoesthat.gui.categories.server_events.label": "Server Events",

	"whodoesthat.events.net.minecraftforge.client.event.ClientChatEvent": "Fired when the client is about to send a chat message to the server.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the chat message will not be sent to the server.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ClientChatReceivedEvent": "Fired when a chat message is received on the client.\nThis can be used for filtering and detecting messages with specific words or phrases, and suppressing them.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message is not displayed in the chat message window.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ChatType",
	"whodoesthat.events.net.minecraftforge.client.event.ClientChatReceivedEvent$Player": "Fired when a player chat message is received on the client.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message is not displayed in the chat message window.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ChatType",
	"whodoesthat.events.net.minecraftforge.client.event.ClientChatReceivedEvent$System": "Fired when a system chat message is received on the client.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message is not displayed in the chat message window or in the overlay.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ClientPlayerChangeGameTypeEvent": "Fired when the client player is notified of a change of §aGameType§r from the server.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ClientPlayerNetworkEvent": "Fired for different client connectivity events.\nSee the various subclasses to listen for specific events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see LoggingIn\n@see LoggingOut\n@see Clone",
	"whodoesthat.events.net.minecraftforge.client.event.ClientPlayerNetworkEvent$LoggingIn": "Fired when the client player logs in to the server. The player should be initialized.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ClientPlayerNetworkEvent$LoggingOut": "Fired when the client player logs out. This event may also fire when a new integrated server is being created.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ComputeFovModifierEvent": "Fired after the field of vision (FOV) modifier for the player is calculated to allow developers to adjust it further.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ViewportEvent.ComputeFov",
	"whodoesthat.events.net.minecraftforge.client.event.ContainerScreenEvent": "Fired for hooking into §aAbstractContainerScreen§r events.\nSee the subclasses to listen for specific events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see Render.Foreground\n@see Render.Background",
	"whodoesthat.events.net.minecraftforge.client.event.ContainerScreenEvent$Render$Background": "Fired after the container screen's background layer and elements are drawn.\nThis can be used for rendering new background elements.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ContainerScreenEvent$Render$Foreground": "Fired after the container screen's foreground layer and elements are drawn, but\nbefore rendering the tooltips and the item stack being dragged by the player.\nThis can be used for rendering elements that must be above other screen elements, but\nbelow tooltips and the dragged stack, such as slot or item stack specific overlays.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.CustomizeGuiOverlayEvent": "Fired when an overlay is about to be rendered to the screen to allow the user to modify it.\n@see BossEventProgress\n@see DebugText\n@see Chat",
	"whodoesthat.events.net.minecraftforge.client.event.CustomizeGuiOverlayEvent$BossEventProgress": "Fired before a boss health bar is rendered to the screen.\nThis event is §ccancellable§r, and does not §chave a result§r.\nCancelling this event will prevent the given bar from rendering.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.CustomizeGuiOverlayEvent$Chat": "Fired before the chat messages overlay is rendered to the screen.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.CustomizeGuiOverlayEvent$DebugText": "Fired before textual information is rendered to the debug screen.\nThis can be used to add or remove text information.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.EntityRenderersEvent": "Fired for on different events/actions relating to §centity renderers§r.\nSee the various subclasses for listening to different events.\nThese events are fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.\n@see EntityRenderersEvent.RegisterLayerDefinitions\n@see EntityRenderersEvent.RegisterRenderers\n@see EntityRenderersEvent.AddLayers",
	"whodoesthat.events.net.minecraftforge.client.event.EntityRenderersEvent$AddLayers": "Fired for registering entity renderer layers at the appropriate time, after the entity and player renderers maps\nhave been created.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.EntityRenderersEvent$CreateSkullModels": "Fired for registering additional §cskull models§r at the appropriate time.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.EntityRenderersEvent$RegisterLayerDefinitions": "Fired for registering layer definitions at the appropriate time.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.EntityRenderersEvent$RegisterRenderers": "Fired for registering entity and block entity renderers at the appropriate time.\nFor registering entity renderer layers to existing entity renderers (whether vanilla or registered through this\nevent), listen for the §aAddLayers§r event instead.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.InputEvent": "Fired when an input is detected from the user's input devices.\nSee the various subclasses to listen for specific devices and inputs.\n@see InputEvent.MouseButton\n@see MouseScrollingEvent\n@see Key\n@see InteractionKeyMappingTriggered",
	"whodoesthat.events.net.minecraftforge.client.event.InputEvent$InteractionKeyMappingTriggered": "Fired when a keymapping that by default involves clicking the mouse buttons is triggered.\nThe key bindings that trigger this event are:\n\nUse Item - defaults to left mouse click\nPick Block - defaults to middle mouse click\nAttack - defaults to right mouse click\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the keymapping's action is not processed further, and the hand will be swung\naccording to §a#shouldSwingHand()§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.InputEvent$Key": "Fired when a keyboard key input occurs, such as pressing, releasing, or repeating a key.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.InputEvent$MouseButton": "Fired when a mouse button is pressed/released. Sub-events get fired §aPre before§r and §aPost after§r this happens.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see the online GLFW documentation\n@see Pre\n@see Post",
	"whodoesthat.events.net.minecraftforge.client.event.InputEvent$MouseScrollingEvent": "Fired when a mouse scroll wheel is used outside of a screen and a player is loaded, before being\nprocessed by vanilla.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, then the mouse scroll event will not be processed further.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see the online GLFW documentation",
	"whodoesthat.events.net.minecraftforge.client.event.ModelEvent": "Houses events related to models.",
	"whodoesthat.events.net.minecraftforge.client.event.ModelEvent$BakingCompleted": "Fired when the §aModelManager§r is notified of the resource manager reloading.\nCalled after the model registry is set up and cached in the §anet.minecraft.client.renderer.block.BlockModelShaper§r.\n\nThe model registry given by this event is unmodifiable. To modify the model registry, use\n§aModelEvent.ModifyBakingResult§r instead.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ModelEvent$ModifyBakingResult": "Fired while the §aModelManager§r is reloading models, after the model registry is set up, but before it's\npassed to the §anet.minecraft.client.renderer.block.BlockModelShaper§r for caching.\nThis event is fired from a worker thread and it is therefore not safe to access anything outside the\nmodel registry and §aModelBakery§r provided in this event.\n\nThe §aModelManager§r firing this event is not fully set up with the latest data when this event fires and\nmust therefore not be accessed in this event.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ModelEvent$RegisterAdditional": "Fired when the §anet.minecraft.client.resources.model.ModelBakery§r is notified of the resource manager reloading.\nAllows developers to register models to be loaded, along with their dependencies.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ModelEvent$RegisterGeometryLoaders": "Allows users to register their own §aIGeometryLoader geometry loaders§r for use in block/item models.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.MovementInputUpdateEvent": "Fired after the player's movement inputs are updated.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RecipesUpdatedEvent": "Fired when the §aRecipeManager§r has received and synced the recipes from the server to the client.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterClientCommandsEvent": "Fired to allow mods to register client commands.\nSome command arguments behave differently for the client commands dispatcher:\n\n§aResourceLocationArgument#getAdvancement(com.mojang.brigadier.context.CommandContext, String)§r only returns\nadvancements that are shown on the advancements screen.\n§aObjectiveArgument#getObjective(com.mojang.brigadier.context.CommandContext, String)§r only returns\nobjectives that are displayed to the player.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see net.minecraftforge.event.RegisterCommandsEvent",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterClientReloadListenersEvent": "Fired to allow mods to register their reload listeners on the client-side resource manager.\nThis event is fired once during the construction of the §aMinecraft§r instance.\nFor registering reload listeners on the server-side resource manager, see §aAddReloadListenerEvent§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterClientTooltipComponentFactoriesEvent": "Allows users to register custom §anet.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent§r\nfactories for their §anet.minecraft.world.inventory.tooltip.TooltipComponent§r types.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterColorHandlersEvent": "Fired for registering block and item color handlers at the appropriate time.\nSee the two subclasses for registering block or item color handlers.\nThese events are fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.\n@see RegisterColorHandlersEvent.Block\n@see RegisterColorHandlersEvent.Item",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterColorHandlersEvent$ColorResolvers": "Allows registration of custom §aColorResolver§r implementations to be used with\n§anet.minecraft.world.level.BlockAndTintGetter#getBlockTint(BlockPos, ColorResolver)§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterColorHandlersEvent$Item": "Fired for registering item color handlers.\nThe block colors should only be used for referencing or delegating item colors to their respective block\ncolors. Use §aRegisterColorHandlersEvent.Block§r for registering your block color handlers.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterDimensionSpecialEffectsEvent": "Allows users to register custom §aDimensionSpecialEffects§r for their dimensions.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterEntitySpectatorShadersEvent": "Allows users to register custom shaders to be used when the player spectates a certain kind of entity.\nVanilla examples of this are the green effect for creepers and the invert effect for endermen.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterGuiOverlaysEvent": "Allows users to register custom §aIGuiOverlay GUI overlays§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterItemDecorationsEvent": "Allows users to register custom §cIItemDecorator§r to Items.\nThis event is not §ccancelable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterKeyMappingsEvent": "Allows users to register custom §anet.minecraft.client.KeyMapping key mappings§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterNamedRenderTypesEvent": "Allows users to register custom named §aRenderType render types§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterParticleProvidersEvent": "Fired for registering particle providers at the appropriate time.\n§aParticleType§rs must be registered during §aRegisterEvent§r as usual;\nthis event is only for the §aParticleProvider§rs.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterPresetEditorsEvent": "Event for registering §aPresetEditor§r screen factories for world presets.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterRecipeBookCategoriesEvent": "Allows users to register custom categories for the vanilla recipe book, making it usable in modded GUIs.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterShadersEvent": "Fired to allow mods to register custom §cshaders§r.\nThis event is fired after the default Minecraft shaders have been registered.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RegisterTextureAtlasSpriteLoadersEvent": "Allows users to register custom §aITextureAtlasSpriteLoader texture atlas sprite loaders§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RenderArmEvent": "Fired before the player's arm is rendered in first person. This is a more targeted version of §aRenderHandEvent§r,\nand can be used to replace the rendering of the player's arm, such as for rendering armor on the arm or outright\nreplacing the arm with armor.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the arm will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RenderBlockScreenEffectEvent": "Fired before a block texture will be overlaid on the player's view.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the overlay will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RenderGuiEvent": "Fired when the HUD is rendered to the screen.\nSee the two subclasses for listening to the two possible phases.\n@see Pre\n@see Post",
	"whodoesthat.events.net.minecraftforge.client.event.RenderGuiOverlayEvent": "Fired when an overlay is rendered to the screen.\nSee the two subclasses for listening to the two possible phases.\nAn overlay that is not normally active cannot be forced to render. In such cases, this event will not fire.\n@see Pre\n@see Post",
	"whodoesthat.events.net.minecraftforge.client.event.RenderHandEvent": "Fired before a hand is rendered in the first person view.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the hand will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see RenderArmEvent",
	"whodoesthat.events.net.minecraftforge.client.event.RenderHighlightEvent": "Fired before a selection highlight is rendered.\nSee the two subclasses to listen for blocks or entities.\n@see Block\n@see Entity",
	"whodoesthat.events.net.minecraftforge.client.event.RenderHighlightEvent$Block": "Fired before a block's selection highlight is rendered.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, then the selection highlight will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RenderHighlightEvent$Entity": "Fired before an entity's selection highlight is rendered.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RenderItemInFrameEvent": "Fired before an item stack is rendered in an item frame.\nThis can be used to prevent normal rendering or add custom rendering.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, then the item stack will not be rendered\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ItemFrameRenderer",
	"whodoesthat.events.net.minecraftforge.client.event.RenderLevelStageEvent": "Fires at various times during LevelRenderer.renderLevel.\nCheck §a#getStage§r to render during the appropriate time for your use case.\nThis event is not §ccancellable§r, and does not §chave a result§r. \nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r. ",
	"whodoesthat.events.net.minecraftforge.client.event.RenderLevelStageEvent$RegisterStageEvent": "Use to create a custom §cstages§r.\nFired after the LevelRenderer has been created.\nThis event is not §ccancellable§r, and does not §chave a result§r. \nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r. ",
	"whodoesthat.events.net.minecraftforge.client.event.RenderLivingEvent": "Fired when a §aLivingEntity§r is rendered.\nSee the two subclasses to listen for before and after rendering.\nDespite this event's use of generic type parameters, this is not a §anet.minecraftforge.eventbus.api.GenericEvent§r,\nand should not be treated as such (such as using generic-specific listeners, which may cause a §aClassCastException§r).\n@param  the living entity that is being rendered\n@param  the model for the living entity\n@see RenderLivingEvent.Pre\n@see RenderLivingEvent.Post\n@see RenderPlayerEvent\n@see LivingEntityRenderer",
	"whodoesthat.events.net.minecraftforge.client.event.RenderNameTagEvent": "Fired before an entity renderer renders the nameplate of an entity.\nThis event is not §ccancellable§r, and  §chas a result§r.\n\n§aResult#ALLOW§r - the nameplate will be forcibly rendered.\n§aResult#DEFAULT§r - the vanilla logic will be used.\n§aResult#DENY§r - the nameplate will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see EntityRenderer",
	"whodoesthat.events.net.minecraftforge.client.event.RenderPlayerEvent": "Fired when a player is being rendered.\nSee the two subclasses for listening for before and after rendering.\n@see RenderPlayerEvent.Pre\n@see RenderPlayerEvent.Post\n@see PlayerRenderer",
	"whodoesthat.events.net.minecraftforge.client.event.RenderTooltipEvent": "Fired during tooltip rendering.\nSee the various subclasses for listening to specific events.\n@see RenderTooltipEvent.GatherComponents\n@see RenderTooltipEvent.Pre\n@see RenderTooltipEvent.Color",
	"whodoesthat.events.net.minecraftforge.client.event.RenderTooltipEvent$Color": "Fired when the colours for the tooltip background are determined.\nThis can be used to modify the background color and the border's gradient colors.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.RenderTooltipEvent$GatherComponents": "Fired when a tooltip gathers the §aTooltipComponent§rs to be rendered, before any text wrapping or processing.\nThe list of components and the maximum width of the tooltip can be modified through this event.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the list of components will be empty, causing the tooltip to not be rendered and\nthe corresponding §aRenderTooltipEvent.Pre§r and §aRenderTooltipEvent.Color§r to not be fired.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent": "Fired on different events/actions when a §aScreen§r is active and visible.\nSee the various subclasses for listening to different events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see Init\n@see Render\n@see BackgroundRendered\n@see MouseInput\n@see KeyInput",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$BackgroundRendered": "Fired directly after the background of the screen is drawn.\nCan be used for drawing above the background but below the tooltips.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$CharacterTyped": "Fired when a keyboard key corresponding to a character is typed.\nSee the two subclasses for listening before and after the normal handling.\n@see CharacterTyped.Pre\n@see CharacterTyped.Post\n@see the online GLFW documentation",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$Closing": "Fired before a §aScreen§r is closed.\nAll screen layers on the screen are closed before this event is fired.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$Init": "Fired when a screen is being initialized.\nSee the two subclasses for listening before and after the initialization.\nListeners added through this event may also be marked as renderable or narratable, if they inherit from\n§anet.minecraft.client.gui.components.Renderable§r and §anet.minecraft.client.gui.narration.NarratableEntry§r\nrespectively.\n@see Init.Pre\n@see Init.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$KeyInput": "Fired whenever a keyboard key is pressed or released.\nSee the various subclasses to listen for key pressing or releasing.\n@see KeyPressed\n@see KeyReleased\n@see InputConstants\n@see the online GLFW documentation",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$KeyPressed": "Fired when a keyboard key is pressed.\nSee the two subclasses for listening before and after the normal handling.\n@see KeyPressed.Pre\n@see KeyPressed.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$KeyReleased": "Fired when a keyboard key is released.\nSee the two subclasses for listening before and after the normal handling.\n@see KeyReleased.Pre\n@see KeyReleased.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$MouseButtonPressed": "Fired when a mouse button is pressed.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseButtonPressed.Pre\n@see MouseButtonPressed.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$MouseButtonReleased": "Fired when a mouse button is released.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseButtonReleased.Pre\n@see MouseButtonReleased.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$MouseDragged": "Fired when the mouse was dragged while a button is being held down.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseDragged.Pre\n@see MouseDragged.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$MouseInput": "Fired whenever an action is performed by the mouse.\nSee the various subclasses to listen for different actions.\n@see MouseButtonPressed\n@see MouseButtonReleased\n@see MouseDragged\n@see MouseScrolled",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$MouseScrolled": "Fired when the mouse was dragged while a button is being held down.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseScrolled.Pre\n@see MouseScrolled.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$Opening": "Fired before any §aScreen§r is opened, to allow changing it or preventing it from being opened.\nAll screen layers on the screen are closed before this event is fired.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the §bScreen§r shall be prevented from opening and any previous screen\nwill remain open. However, cancelling this event will not prevent the closing of screen layers which happened before\nthis event fired.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$Render": "Fired when a screen is being drawn.\nSee the two subclasses for listening before and after drawing.\n@see Render.Pre\n@see Render.Post",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenEvent$RenderInventoryMobEffects": "Fired ahead of rendering any active mob effects in the §aEffectRenderingInventoryScreen inventory screen§r.\nCan be used to select the size of the effects display (full or compact) or even hide or replace vanilla's rendering entirely.\nThis event can also be used to modify the horizontal position of the stack of effects being rendered.\nThis event is §ccancellable§r and does not §chave a result§r.\nCancelling this event will prevent vanilla rendering.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ScreenshotEvent": "Fired when a screenshot is taken, but before it is written to disk.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the screenshot is not written to disk, and the message in the event will be posted\nto the player's chat.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see Screenshot",
	"whodoesthat.events.net.minecraftforge.client.event.TextureStitchEvent": "Fired after a texture atlas is stitched together.\n@see TextureStitchEvent.Post\n@see TextureAtlas",
	"whodoesthat.events.net.minecraftforge.client.event.ToastAddEvent": "Fired when the client queues a §aToast§r message to be shown onscreen.\nToasts are small popups that appear on the top right of the screen, for certain actions such as unlocking Advancements and Recipes.\nThis event is §ccancellable§r, and does not §chave a result§r.\nCancelling the event stops the toast from being queued, which means it never renders.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ViewportEvent": "Fired for hooking into the entity view rendering in §aGameRenderer§r.\nThese can be used for customizing the visual features visible to the player.\nSee the various subclasses for listening to different features.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see RenderFog\n@see ComputeFogColor\n@see ComputeCameraAngles\n@see ComputeFov",
	"whodoesthat.events.net.minecraftforge.client.event.ViewportEvent$ComputeCameraAngles": "Fired to allow altering the angles of the player's camera.\nThis can be used to alter the player's view for different effects, such as applying roll.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ViewportEvent$ComputeFogColor": "Fired for customizing the color of the fog visible to the player.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.ViewportEvent$ComputeFov": "Fired for altering the raw field of view (FOV).\nThis is after the FOV settings are applied, and before modifiers such as the Nausea effect.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ComputeFovModifierEvent",
	"whodoesthat.events.net.minecraftforge.client.event.ViewportEvent$RenderFog": "Fired for rendering custom fog. The plane distances are based on the player's render distance.\nThis event is §ccancellable§r, and §chas a result§r. \n\nThe event must be cancelled for any changes to the plane distances to take effect.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.sound.PlaySoundEvent": "Fired when a sound is about to be played by the sound engine. This fires before the sound is played and before any\nchecks on the sound (such as a zeroed volume, an empty §anet.minecraft.client.resources.sounds.Sound§r, and\nothers). This can be used to change or prevent (by passing §bnull)§r a sound from being played through\n§a#setSound(SoundInstance)§r).\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlaySoundSourceEvent\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.minecraftforge.client.event.sound.PlaySoundSourceEvent": "Fired when a non-streaming sound is being played. A non-streaming sound is loaded fully into memory\nin a buffer before being played, and used for most sounds of short length such as sound effects for clicking\nbuttons.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.minecraftforge.client.event.sound.PlayStreamingSourceEvent": "Fired when a streaming sound is being played. A streaming sound is streamed directly from its source\n(such as a file), and used for sounds of long length which are unsuitable to keep fully loaded in-memory in a buffer\n(as is done for regular non-streaming sounds), such as background music or music discs.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.minecraftforge.client.event.sound.SoundEngineLoadEvent": "Fired when the §aSoundEngine§r is constructed or (re)loaded, such as during game initialization or when the sound\noutput device is changed.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.client.event.sound.SoundEvent": "Superclass for sound related events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see SoundSourceEvent\n@see PlaySoundEvent\n@see SoundEngineLoadEvent",
	"whodoesthat.events.net.minecraftforge.client.event.sound.SoundEvent$SoundSourceEvent": "Superclass for when a sound has started to play on an audio channel.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlaySoundSourceEvent\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.minecraftforge.common.capabilities.RegisterCapabilitiesEvent": "This event fires when it is time to register your capabilities.\n@see Capability",
	"whodoesthat.events.net.minecraftforge.event.AddPackFindersEvent": "Fired on §aPackRepository§r creation to allow mods to add new pack finders.",
	"whodoesthat.events.net.minecraftforge.event.AddReloadListenerEvent": "The main ResourceManager is recreated on each reload, just after §aReloadableServerResources§r's creation.\nThe event is fired on each reload and lets modders add their own ReloadListeners, for server-side resources.\nThe event is fired on the §aMinecraftForge#EVENT_BUS§r",
	"whodoesthat.events.net.minecraftforge.event.AnvilUpdateEvent": "AnvilUpdateEvent is fired whenever the input stacks (left or right) or the name in an anvil changed. \n\nIt is called from §aAnvilMenu#createResult()§r. \n\nIf the event is canceled, vanilla behavior will not run, and the output will be set to §aItemStack#EMPTY§r. \n\nIf the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. \n\nif the output is empty, and the event is not canceled, vanilla behavior will execute. ",
	"whodoesthat.events.net.minecraftforge.event.BuildCreativeModeTabContentsEvent": "Fired when the contents of a specific creative mode tab are being populated.\nThis event may be fired multiple times if the operator status of the local player or enabled feature flags changes.\n\nThis event is not §ccancellable§r, and does not §chave a result§r.\n\nThis event is fired on the §cmod-specific event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.minecraftforge.event.CommandEvent": "CommandEvent is fired after a command is parsed, but before it is executed.\nThis event is fired during the invocation of §aCommands#performCommand(ParseResults, String)§r.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the command will not be executed.\n\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.DifficultyChangeEvent": "DifficultyChangeEvent is fired when difficulty is changing. \n\nThis event is fired via the §aForgeHooks#onDifficultyChange(Difficulty, Difficulty)§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.GameShuttingDownEvent": "A simple marker event that notifies when the game is about to close.\nFires once on the physical client and physical server.\nDoes not fire for the Integrated Server on a physical Client.\nOn the client, the GL Context is still valid when the event is fired.\nFired on the FORGE event bus.\n@author Curle",
	"whodoesthat.events.net.minecraftforge.event.GrindstoneEvent$OnPlaceItem": "This event is §aCancelable§r \n\n§aOnPlaceItem§r is fired when the inputs to a grindstone are changed. \nThe following rules apply:\n\nIf the event is canceled, vanilla behavior will not run, and the output will be §cempty§r.\nIf the event is not canceled\n\nand the output is empty, the output will be determined by vanilla.\nand the output is not empty, the output will be set, without running vanilla behavior.\n\nVanilla XP calculation logic will be used unless all of the following criterias are met:\n\nthe amount of experience is greater than or equal to §b0§r;\nthe event is not §ccanceled§r;\nthe §coutput§r is not empty.",
	"whodoesthat.events.net.minecraftforge.event.GrindstoneEvent$OnTakeItem": "This event is §aCancelable§r \n\n§aOnTakeItem§r is fired when the output in a grindstone are is taken. \n\nIt is called from §aGrindstoneMenu#GrindstoneMenu(int, Inventory)§r. \n\nIf the event is canceled, vanilla behavior will not run, and no inputs will be consumed. \n\nif the amount of experience is larger than or equal 0, the vanilla behavior for calculating experience will not run. ",
	"whodoesthat.events.net.minecraftforge.event.ItemAttributeModifierEvent": "This event is fired when the attributes for an ItemStack are being calculated.\nAttributes are calculated on the server when equipping and unequipping an item to add and remove attributes respectively, both must be consistent.\nAttributes are calculated on the client when rendering an item's tooltip to show relevant attributes.\n\nNote that this event is fired regardless of if the stack has NBT overriding attributes or not. If your attribute should be\nignored when attributes are overridden, you can check for the presence of the §bAttributeModifiers§r tag.\n\nThis event is fired on the §anet.minecraftforge.common.MinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.ItemStackedOnOtherEvent": "This event provides the functionality of the pair of functions used for the Bundle, in one event:\n\n§aItem#overrideOtherStackedOnMe(ItemStack, ItemStack, Slot, ClickAction, Player, SlotAccess)§r\n§aItem#overrideStackedOnOther(ItemStack, Slot, ClickAction, Player)§r\nThis event is fired before either of the above are called, when a carried item is clicked on top of another in a GUI slot.\nThis event (and items stacking on others in general) is fired on both §csides§r, but only on §cthe client§r in the creative menu.\nPractically, that means that listeners of this event should require the player to be in survival mode if using capabilities that are not synced.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the container's logic halts, the carried item and the slot will not be swapped, and handling is assumed to have been done by the mod.\nThis also means that the two vanilla checks described above will not be called.",
	"whodoesthat.events.net.minecraftforge.event.LootTableLoadEvent": "Fired when a §aLootTable§r is loaded from JSON.\nLoot tables loaded from world save datapacks will not fire this event as they are considered user configuration files.\nThis event is fired whenever server resources are loaded or reloaded.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the loot table will be made empty.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.ModMismatchEvent": "Fires when the mod loader is in the process of loading a world that was last saved\nwith mod versions that differ from the currently-loaded versions. This can be used to\nenqueue work to run at a later point, such as multi-file migration of data.\nNote that level and world information has not yet been fully loaded; as such, it is\nunsafe to access server or level information during handling of this event.\nThis event is not §ccancellable§r, and does not §chave a result§r.\n\nThis event is fired on the §cmod-specific event bus§r,\non both §clogical sides§r.",
	"whodoesthat.events.net.minecraftforge.event.OnDatapackSyncEvent": "Fires when a player joins the server or when the reload command is ran,\nbefore tags and crafting recipes are sent to the client. Send datapack data\nto clients when this event fires.",
	"whodoesthat.events.net.minecraftforge.event.PlayLevelSoundEvent": "PlayLevelSoundEvent is fired when a sound is played on a §aLevel§r.\nThis event is fired from §aLevel#playSound§r, §aLevel#playSeededSound§r, and §aLocalPlayer#playSound§r.\n\n§a#getLevel()§r contains the level the sound is being played in.\n§a#getSound()§r contains the sound event to be played.\n§a#getOriginalVolume()§r contains the original volume for the sound to be played at.\n§a#getOriginalPitch()§r contains the original pitch for the sound to be played at.\n§a#getNewVolume()§r contains the volume the sound will be played at.\n§a#getNewPitch()§r contains the pitch the sound will be played at.\n\nThis event is §aCancelable cancelable§r.\nIf this event is canceled, the sound is not played.\n\nThis event does not have a result.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.PlayLevelSoundEvent$AtEntity": "PlayLevelSoundEvent.AtEntity is fired when a sound is played on the §aLevel§r at an §aEntity Entity§r's position.\nThis event is fired from §aLevel#playSound§r, §aLevel#playSeededSound§r, and §aLocalPlayer#playSound§r.\n\nThis event is §aCancelable cancelable§r.\nIf this event is canceled, the sound is not played.\n\nThis event does not have a result.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.PlayLevelSoundEvent$AtPosition": "PlayLevelSoundEvent.AtPosition is fired when a sound is played on the §aLevel§r at a specific position.\nThis event is fired from §aLevel#playSound§r and §aLevel#playSeededSound§r.\n\nThis event is §aCancelable cancelable§r.\nIf this event is canceled, the sound is not played.\n\nThis event does not have a result.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.RegisterCommandsEvent": "Commands are rebuilt whenever §aReloadableServerResources§r is recreated.\nYou can use this event to register your commands whenever the §aCommands§r class in constructed.\nThe event is fired on the §aMinecraftForge#EVENT_BUS§r",
	"whodoesthat.events.net.minecraftforge.event.RegisterGameTestsEvent": "Game tests are registered on client or server startup.\nIt is only run once for a given instance of the game if §aForgeGameTestHooks#isGametestEnabled§r returns true.\nThis is the preferred way to register your game tests.\n\nFired on the Mod bus, see §aIModBusEvent§r.",
	"whodoesthat.events.net.minecraftforge.event.RegisterStructureConversionsEvent": "Fired for registering structure conversions for pre-1.18.2 worlds. This is used by §aStructuresBecomeConfiguredFix§r\nfor converting old structure IDs in pre-1.18.2 worlds to their new equivalents, which can be differentiated per biome.\nBy default, structures whose old ID has a namespace which is not equal to {@value ResourceLocation#DEFAULT_NAMESPACE}\nwill be assumed to belong to a modded structure and will be used as the new ID. Mods may choose to register structure\nconversions for their structures, if they wish to override this default behavior.\nThis event will only fire if §aStructuresBecomeConfiguredFix§r is used, as a result of converting a\npre-1.18.2 world to the current version.\nThis event is not §ccancelable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r. \n@see StructuresBecomeConfiguredFix\n@see #register(String, StructuresBecomeConfiguredFix.Conversion)",
	"whodoesthat.events.net.minecraftforge.event.ServerChatEvent": "This event is fired whenever a §aServerboundChatPacket§r is received from a client\nwho has submitted their chat message.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message will not be sent to clients.\n\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.TagsUpdatedEvent": "Fired when tags are updated on either server or client. This event can be used to refresh data that depends on tags.",
	"whodoesthat.events.net.minecraftforge.event.VanillaGameEvent": "VanillaGameEvent is fired on the server whenever one of Vanilla's §aGameEvent GameEvents§r fire. \n\nThis allows for listening to Vanilla's events in a more structured and global way that is not tied to needing a block entity listener. \n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r. \n\nCancel this event to prevent Vanilla from posting the §aGameEvent§r to all nearby §anet.minecraft.world.level.gameevent.GameEventListener GameEventListeners§r.",
	"whodoesthat.events.net.minecraftforge.event.brewing.PlayerBrewedPotionEvent": "This event is called when a player picks up a potion from a brewing stand.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityAttributeCreationEvent": "EntityAttributeCreationEvent.\n\nUse this event to register attributes for your own EntityTypes.\nThis event is fired after registration and before common setup.\n\nFired on the Mod bus §aIModBusEvent§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityAttributeModificationEvent": "EntityAttributeModificationEvent.\n\nUse this event to add attributes to existing entity types.\nThis event is fired after registration and before common setup, and after §aEntityAttributeCreationEvent§r\n\nFired on the Mod bus §aIModBusEvent§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityEvent": "EntityEvent is fired when an event involving any Entity occurs.\n\nIf a method utilizes this §anet.minecraftforge.eventbus.api.Event§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#entity§r contains the entity that caused this event to occur.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityEvent$EnteringSection": "This event is fired on server and client after an Entity has entered a different section. \n\nSections are 16x16x16 block grids of the world.\n\nThis event does not fire when a new entity is spawned, only when an entity moves from one section to another one.\nUse §aEntityJoinLevelEvent§r to detect new entities joining the world.\n\nThis event is not §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §anet.minecraftforge.common.MinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityEvent$EntityConstructing": "EntityConstructing is fired when an Entity is being created. \n\nThis event is fired within the constructor of the Entity.\n\nThis event is not §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityEvent$EyeHeight": "Remove Entity Eye/Size hooks, as they need to be redesigned, this is no longer fired in any forge/vanilla code.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityEvent$Size": "CAREFUL: This is also fired in the Entity constructor. Therefore, the entity (subclass) might not be fully initialized. Check §aEntity#isAddedToWorld()§r or §b!Entity.firstUpdate§r.\n\nIf you change the player's size, you probably want to set the eye height accordingly as well\n\nThis event is not §aCancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityJoinLevelEvent": "This event is fired whenever an §aEntity§r joins a §aLevel§r.\nThis event is fired whenever an entity is added to a level in §aLevel#addFreshEntity(Entity)§r\nand §bPersistentEntitySectionManager#addNewEntity(Entity, boolean)§r.\n\nNote: This event may be called before the underlying §aLevelChunk§r is promoted to §aChunkStatus#FULL§r.\nYou will cause chunk loading deadlocks if you do not delay your world interactions.\n\nThis event is §ccancellable§r and does not §chave a result§r.\nIf the event is canceled, the entity will not be added to the level.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityLeaveLevelEvent": "This event is fired whenever an §aEntity§r leaves a §aLevel§r.\nThis event is fired whenever an entity is removed from the level in §aLevelCallback#onTrackingEnd(Object)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityMobGriefingEvent": "EntityMobGriefingEvent is fired when mob griefing is about to occur and allows an event listener to specify whether it should or not.\n\nThis event is fired when ever the §bmobGriefing§r game rule is checked.\n\nThis event has a §aHasResult result§r:\n\n§aResult#ALLOW§r means this instance of mob griefing is allowed.\n§aResult#DEFAULT§r means the §bmobGriefing§r game rule is used to determine the behaviour.\n§aResult#DENY§r means this instance of mob griefing is not allowed.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityMountEvent": "This event gets fired whenever a entity mounts/dismounts another entity.\n\nentityBeingMounted can be null, be sure to check for that.\n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf this event is canceled, the entity does not mount/dismount the other entity.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityStruckByLightningEvent": "EntityStruckByLightningEvent is fired when an Entity is about to be struck by lightening.\n\nThis event is fired whenever an EntityLightningBolt is updated to strike an Entity in\n§aLightningBolt#tick()§r via §aForgeEventFactory#onEntityStruckByLightning(Entity, LightningBolt)§r.\n\n§a#lightning§r contains the instance of EntityLightningBolt attempting to strike an entity.\n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the Entity is not struck by the lightening.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTeleportEvent": "EntityTeleportEvent is fired when an event involving any teleportation of an Entity occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#getTarget()§r contains the target destination.\n\n§a#getPrev()§r contains the entity's current position.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTeleportEvent$ChorusFruit": "EntityTeleportEvent.ChorusFruit is fired before a LivingEntity is teleported due to consuming Chorus Fruit.\n\nThis event is §aCancelable§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTeleportEvent$EnderEntity": "EntityTeleportEvent.EnderEntity is fired before an Enderman or Shulker randomly teleports.\n\nThis event is §aCancelable§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTeleportEvent$EnderPearl": "EntityTeleportEvent.EnderPearl is fired before an Entity is teleported from an EnderPearlEntity.\n\nThis event is §aCancelable§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTeleportEvent$SpreadPlayersCommand": "EntityTeleportEvent.SpreadPlayersCommand is fired before a living entity is teleported\nfrom use of §anet.minecraft.server.commands.SpreadPlayersCommand§r.\n\nThis event is §aCancelable§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTeleportEvent$TeleportCommand": "EntityTeleportEvent.TeleportCommand is fired before a living entity is teleported\nfrom use of §anet.minecraft.server.commands.TeleportCommand§r.\n\nThis event is §aCancelable§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.minecraftforge.event.entity.EntityTravelToDimensionEvent": "EntityTravelToDimensionEvent is fired before an Entity travels to a dimension.\n\n§a#dimension§r contains the id of the dimension the entity is traveling to.\n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf this event is canceled, the Entity does not travel to the dimension.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.ProjectileImpactEvent": "This event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\nThis event is fired when a projectile entity impacts something.\n\nThis event is fired via §aForgeEventFactory#onProjectileImpact(Projectile, HitResult)§r\nThis event is fired for all vanilla projectiles by Forge,\ncustom projectiles should fire this event and check the result in a similar fashion.\nThis event is cancelable. When canceled, the impact will not be processed and the projectile will continue flying.\nKilling or other handling of the entity after event cancellation is up to the modder.\nYou can also directly set the §aImpactResult§r to change the impact behaviour.\n@see #setImpactResult(ImpactResult)",
	"whodoesthat.events.net.minecraftforge.event.entity.SpawnPlacementRegisterEvent": "This event allows each §aEntityType§r to have a §aSpawnPlacements.SpawnPredicate§r registered or modified.\nSpawn Predicates are checked whenever an §aEntity§r of the given §aEntityType§r spawns in the world naturally.\nIf registering your own entity's spawn placements, you should use §aSpawnPlacementRegisterEvent#register(EntityType, SpawnPlacements.Type, Heightmap.Types, SpawnPlacements.SpawnPredicate, Operation)§r\nSo that you ensure that your entity has a heightmap type and placement type registered.\nIf modifying vanilla or another mod's spawn placements, you can use three operations:\nREPLACE: checked first, the last mod to replace the predicate wipes out all other predicates. Listen with a low §aEventPriority§r if you need to do this.\nOR: checked second, only one of these predicates must pass along with the original predicate\nAND: checked third, these predicates must all pass along with the original predicate\nThis event is not §ccancellable§r and does not §chave a result§r.\nFired on the Mod bus §aIModBusEvent§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.item.ItemEvent": "Base class for all §aItemEntity§r events. Contains a reference to the\nItemEntity of interest. For most ItemEntity events, there's little to no\nadditional useful data from the firing method that isn't already contained\nwithin the ItemEntity instance.",
	"whodoesthat.events.net.minecraftforge.event.entity.item.ItemExpireEvent": "Event that is fired when an EntityItem's age has reached its maximum\nlifespan. Canceling this event will prevent the EntityItem from being\nflagged as dead, thus staying it's removal from the world. If canceled\nit will add more time to the entities life equal to extraLife.",
	"whodoesthat.events.net.minecraftforge.event.entity.item.ItemTossEvent": "Event that is fired whenever a player tosses (Q) an item or drag-n-drops a\nstack of items outside the inventory GUI screens. Canceling the event will\nstop the items from entering the world, but will not prevent them being\nremoved from the inventory - and thus removed from the system.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.AnimalTameEvent": "This event is fired when an §aAnimal§r is tamed. \n\nIt is fired via §aForgeEventFactory#onAnimalTame(Animal, Player)§r.\nForge fires this event for applicable vanilla animals, mods need to fire it themselves.\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r. If canceled, taming the animal will fail.\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.EnderManAngerEvent": "This event is fired on the forge bus before an Enderman detects that a player is looking at them.\nIt will not be fired if the detection is already prevented by §aIForgeItem#isEnderMask§r\n\nThis event is §aCancelable§r.\nIf this event is canceled, the Enderman will not target the player.\n\nThis event does not have a §aResult§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingAttackEvent": "LivingAttackEvent is fired when a living Entity is attacked. \n\nThis event is fired whenever an Entity is attacked in\n§aLivingEntity#hurt(DamageSource, float)§r and\n§aPlayer#hurt(DamageSource, float)§r. \n\nThis event is fired via the §aForgeHooks#onLivingAttack(LivingEntity, DamageSource, float)§r.\n\n§a#source§r contains the DamageSource of the attack. \n\n§a#amount§r contains the amount of damage dealt to the entity. \n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf this event is canceled, the Entity does not take attack damage.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingBreatheEvent": "LivingBreatheEvent is fired whenever a living entity ticks.\n\nThis event is fired via §aForgeHooks#onLivingBreathe(LivingEntity, int, int)§r.\n\nThis event is not §aCancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on §aMinecraftForge#EVENT_BUS§r",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingChangeTargetEvent": "This event allows you to change the target an entity has. \n\nThis event is fired before §aLivingSetAttackTargetEvent§r. \n\nThis event is fired via the §aForgeHooks#onLivingChangeTarget(LivingEntity, LivingEntity, ILivingTargetType)§r\n\n§a#getOriginalTarget()§r returns the target that should originally be set.\nThe return value cannot be affected by calling §a#setNewTarget(LivingEntity)§r.\n\n§a#getNewTarget()§r returns the new target that this entity will have.\nThe return value can be affected by calling §a#setNewTarget(LivingEntity)§r.\n\n§a#getTargetType()§r returns the target type that caused the change of targets.\n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf you cancel this event, the target will not be changed and it will stay the same.\nCancelling this event will prevent §aLivingSetAttackTargetEvent§r from being posted.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingDamageEvent": "LivingDamageEvent is fired just before damage is applied to entity.\n\nAt this point armor, potion and absorption modifiers have already been applied to damage - this is FINAL value.\n\nAlso note that appropriate resources (like armor durability and absorption extra hearths) have already been consumed.\n\nThis event is fired whenever an Entity is damaged in\n§bLivingEntity#actuallyHurt(DamageSource, float)§r and\n§bPlayer#actuallyHurt(DamageSource, float)§r.\n\nThis event is fired via the §aForgeHooks#onLivingDamage(LivingEntity, DamageSource, float)§r.\n\n§a#source§r contains the DamageSource that caused this Entity to be hurt. \n\n§a#amount§r contains the final amount of damage that will be dealt to entity. \n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the Entity is not hurt. Used resources WILL NOT be restored.\n\nThis event does not have a result. §aHasResult§r\n\n@see LivingHurtEvent",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingDeathEvent": "LivingDeathEvent is fired when an Entity dies. \n\nThis event is fired whenever an Entity dies in\n§aLivingEntity#die(DamageSource)§r,\n§aPlayer#die(DamageSource)§r, and\n§aServerPlayer#die(DamageSource)§r. \n\nThis event is fired via the §aForgeHooks#onLivingDeath(LivingEntity, DamageSource)§r.\n\n§a#source§r contains the DamageSource that caused the entity to die. \n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the Entity does not die.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingDestroyBlockEvent": "Fired when the ender dragon or wither attempts to destroy a block and when ever a zombie attempts to break a door. Basically a event version of §aBlock#canEntityDestroy(BlockState, BlockGetter, BlockPos, Entity)§r\n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the block will not be destroyed.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingDropsEvent": "LivingDropsEvent is fired when an Entity's death causes dropped items to appear.\n\nThis event is fired whenever an Entity dies and drops items in\n§aLivingEntity#die(DamageSource)§r.\n\nThis event is fired via the §aForgeHooks#onLivingDrops(LivingEntity, DamageSource, Collection, int, boolean)§r .\n\n§a#source§r contains the DamageSource that caused the drop to occur.\n\n§a#drops§r contains the ArrayList of EntityItems that will be dropped.\n\n§a#lootingLevel§r contains the amount of loot that will be dropped.\n\n§a#recentlyHit§r determines whether the Entity doing the drop has recently been damaged.\n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the Entity does not drop anything.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingDrownEvent": "LivingDrownEvent is fired whenever a living entity can't breathe and its air supply is less than or equal to zero.\n\nThis event is fired via §aForgeHooks#onLivingBreathe(LivingEntity, int, int)§r.\n\nThis event is §aCancelable§r. Effects of cancellation are noted in §a#setCanceled(boolean)§r.\n\nThis event does not §chave a result§r.\nThis event is fired on §aMinecraftForge#EVENT_BUS§r",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEntityUseItemEvent$Finish": "Fired after an item has fully finished being used.\nThe item has been notified that it was used, and the item/result stacks reflect after that state.\nThis means that when this is fired for a Potion, the potion effect has already been applied.\n§aLivingEntityUseItemEvent#item§r is a copy of the item BEFORE it was used.\nIf you wish to cancel those effects, you should cancel one of the above events.\nThe result item stack is the stack that is placed in the player's inventory in replacement of the stack that is currently being used.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEntityUseItemEvent$Stop": "Fired when a player stops using an item without the use duration timing out.\nExample:\nStop eating 1/2 way through\nStop defending with sword\nStop drawing bow. This case would fire the arrow\nDuration on this event is how long the item had left in it's count down before 'finishing'\nCanceling this event will prevent the Item from being notified that it has stopped being used,\nThe only vanilla item this would effect are bows, and it would cause them NOT to fire there arrow.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEntityUseItemEvent$Tick": "Fired every tick that a player is 'using' an item, see §aStart§r for info.\nCancel the event, or set the duration to {@literal <=} 0 to cause the player to stop using the item.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEquipmentChangeEvent": "§aLivingEquipmentChangeEvent§r is fired when the Equipment of a Entity changes. \n\nThis event is fired whenever changes in Equipment are detected in §aLivingEntity#tick()§r. \n\nThis also includes entities joining the World, as well as being cloned. \n\nThis event is fired on server-side only. \n\n§a#slot§r contains the affected §aEquipmentSlot§r. \n\n§a#from§r contains the §aItemStack§r that was equipped previously. \n\n§a#to§r contains the §aItemStack§r that is equipped now. \n\nThis event is not §aCancelable§r. \n\nThis event does not have a result. §aHasResult§r \n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEvent": "LivingEvent is fired whenever an event involving a §aLivingEntity§r occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEvent$LivingJumpEvent": "LivingJumpEvent is fired when an Entity jumps.\n\nThis event is fired whenever an Entity jumps in\n§bLivingEntity#jumpFromGround()§r, §bMagmaCube#jumpFromGround()§r,\nand §bHorse#jumpFromGround()§r.\n\nThis event is fired via the §aForgeHooks#onLivingJump(LivingEntity)§r.\n\nThis event is not §aCancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingEvent$LivingTickEvent": "LivingUpdateEvent is fired when a LivingEntity is ticked in §aLivingEntity#tick()§r. \n\nThis event is fired via the §aForgeHooks#onLivingTick(LivingEntity)§r.\n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the Entity does not update.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingExperienceDropEvent": "Event for when an entity drops experience on its death, can be used to change\nthe amount of experience points dropped or completely prevent dropping of experience\nby canceling the event.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingFallEvent": "LivingFallEvent is fired when an Entity is set to be falling.\n\nThis event is fired whenever an Entity is set to fall in\n§aLivingEntity#causeFallDamage(float, float, DamageSource)§r.\n\nThis event is fired via the §aForgeHooks#onLivingFall(LivingEntity, float, float)§r.\n\n§a#distance§r contains the distance the Entity is to fall. If this event is canceled, this value is set to 0.0F.\n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf this event is canceled, the Entity does not fall.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingGetProjectileEvent": "This event is fired when a living entity attempts to get a projectile with the\n§aLivingEntity#getProjectile(ItemStack)§r method. The item stack given is usually the item stack of a\n§anet.minecraft.world.item.ProjectileWeaponItem§r and the item stack returned is usually the item stack of a\n§anet.minecraft.world.entity.projectile.Projectile§r.\n\nThis event is not §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nThis event does not have a result. §anet.minecraftforge.eventbus.api.Event.HasResult§r\n\nThis event is fired on the §anet.minecraftforge.common.MinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingHealEvent": "LivingHealEvent is fired when an Entity is set to be healed. \n\nThis event is fired whenever an Entity is healed in §aLivingEntity#heal(float)§r\n\nThis event is fired via the §aForgeEventFactory#onLivingHeal(LivingEntity, float)§r.\n\n§a#amount§r contains the amount of healing done to the Entity that was healed. \n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf this event is canceled, the Entity is not healed.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingHurtEvent": "LivingHurtEvent is fired when an Entity is set to be hurt. \n\nThis event is fired whenever an Entity is hurt in\n§bLivingEntity#actuallyHurt(DamageSource, float)§r and\n§bPlayer#actuallyHurt(DamageSource, float)§r.\n\nThis event is fired via the §aForgeHooks#onLivingHurt(LivingEntity, DamageSource, float)§r.\n\n§a#source§r contains the DamageSource that caused this Entity to be hurt. \n\n§a#amount§r contains the amount of damage dealt to the Entity that was hurt. \n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the Entity is not hurt.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n@see LivingDamageEvent",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingKnockBackEvent": "LivingKnockBackEvent is fired when a living entity is about to be knocked back. \n\nThis event is fired whenever an Entity is knocked back in\n§aLivingEntity#hurt(DamageSource, float)§r,\n§bLivingEntity#blockUsingShield(LivingEntity)§r,\n§aMob#doHurtTarget(Entity)§r and\n§aPlayer#attack(Entity)§r \n\nThis event is fired via §aForgeHooks#onLivingKnockBack(LivingEntity, float, double, double)§r .\n\n§a#strength§r contains the strength of the knock back. \n\n§a#ratioX§r contains the x ratio of the knock back. \n\n§a#ratioZ§r contains the z ratio of the knock back. \n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the entity is not knocked back.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingMakeBrainEvent": "LivingMakeBrainEvent is fired whenever a new §anet.minecraft.world.entity.ai.Brain§r instance is created using §aLivingEntity#makeBrain(Dynamic)§r.\n\nTo access the internal §aBrainBuilder§r, call §aLivingMakeBrainEvent#getTypedBrainBuilder(LivingEntity)§r using the downcasted §aLivingEntity§r obtained from §aLivingEvent#getEntity()§r.\n\nThe BrainBuilder will initially contain all the state found in the original Brain instance.\n\nAfter this event is posted, a fresh Brain instance will be created using the encapsulated state found in the BrainBuilder\nand replace the previously created Brain instance for the entity.\n\nThis event is fired via the §aForgeHooks#onLivingMakeBrain(LivingEntity, Brain, Dynamic)§r.\n\nThis event is not §aCancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingSwapItemsEvent$Hands": "This event is fired when a living entity is about to swap the items in their main and offhand.\nThis event is executed in §aServerGamePacketListenerImpl#handlePlayerAction§r\nThis event is §ccancellable§r, and does not §chave a result§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.LivingUseTotemEvent": "Fired when an Entity attempts to use a totem to prevent its death.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, the totem will not prevent the entity's death.\nThis event is fired on the §cForge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobEffectEvent": "This event is fired when an interaction between a §aLivingEntity§r and §aMobEffectInstance§r happens.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobEffectEvent$Added": "This event is fired when a new §aMobEffectInstance§r is added to an entity.\nThis event is also fired if an entity already has the effect but with a different duration or amplifier.\nThis event is not §aCancelable§r.\nThis event does not have a result.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobEffectEvent$Applicable": "This event is fired to check if a §aMobEffectInstance§r can be applied to an entity.\nThis event is not §aCancelable§r.\nThis event §aHasResult has a result§r.\n\n§aResult#ALLOW ALLOW§r will apply this mob effect.\n§aResult#DENY DENY§r will not apply this mob effect.\n§aResult#DEFAULT DEFAULT§r will run vanilla logic to determine if this mob effect is applicable in §aLivingEntity#canBeAffected§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobEffectEvent$Expired": "This event is fired when a §aMobEffectInstance§r expires on an entity.\nThis event is not §aCancelable§r.\nThis event does not have a result.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobEffectEvent$Remove": "This Event is fired when a §aMobEffect§r is about to get removed from an Entity.\nThis Event is §aCancelable§r. If canceled, the effect will not be removed.\nThis Event does not have a result.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobSpawnEvent": "This class holds all events relating to the entire flow of mob spawns.\n\nCurrently, the events have the following flow for any given mob spawn:\n\nBefore the spawn is attempted §aSpawnPlacementCheck§r is fired, to determine if the spawn may occur based on mob-specific rules.\n\nAfter the entity is created §aPositionCheck§r is fired, to determine if the selected position is legal for the entity.\n\nIf both checks succeeded, §aFinalizeSpawn§r is fired, which performs initialization on the newly-spawned entity.\n\nFinally, if the spawn was not cancelled via §aFinalizeSpawn#setSpawnCancelled§r, then §aEntityJoinLevelEvent§r is fired as the entity enters the world.\n\n§aAllowDespawn§r is not related to the mob spawn event flow, as it fires when a despawn is attempted.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobSpawnEvent$FinalizeSpawn": "This event is fired before §aMob#finalizeSpawn§r is called.\n\nThis allows mods to control mob initialization.\n\nIn vanilla code, this event is injected by a transformer and not via patch, so calls cannot be traced via call hierarchy (it is not source-visible).\n\nCanceling this event will result in §aMob#finalizeSpawn§r not being called, and the returned value always being null, instead of propagating the SpawnGroupData.\n\nThe entity will still be spawned. If you want to prevent the spawn, use §aFinalizeSpawn#setSpawnCancelled§r, which will cause Forge to prevent the spawn.\n\nThis event is fired on §aMinecraftForge#EVENT_BUS§r, and is only fired on the logical server.\n@see ForgeEventFactory#onFinalizeSpawn\n@apiNote Callers do not need to check if the entity's spawn was cancelled, as the spawn will be blocked by Forge.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobSpawnEvent$PositionCheck": "This event is fired when a mob checks for a valid spawn position, after §aSpawnPlacements#checkSpawnRules§r has been evaluated.\n\nConditions validated here include the following:\n\nObstruction - mobs inside blocks or fluids.\nPathfinding - if the spawn block is valid for pathfinding.\nSea Level - Ocelots check if the position is above sea level.\nSpawn Block - Ocelots check if the below block is grass or leaves.\n\nThese checks are performed by the vanilla methods §aMob#checkSpawnRules§r and §aMob#checkSpawnObstruction§r.\n\nThe logical-and of both methods forms the default result of this event.\n\nThis event §chas a result§r.\n\nTo change the result of this event, use §a#setResult§r. Results are interpreted in the following manner:\n\nAllow - The position will be accepted, and the spawn process will continue.\nDefault - The position will be accepted if §aMob#checkSpawnRules§r and §aMob#checkSpawnObstruction§r are both true.\nDeny - The position will not be accepted. The spawn process will abort, and further events will not be called.\n\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.\n@apiNote This event fires after Spawn Placement checks, which are the primary set of spawn checks.\n@see §aSpawnPlacementRegisterEvent§r To modify spawn placements statically at startup.\n@see §aSpawnPlacementCheck§r To modify the result of spawn placements at runtime.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.MobSpawnEvent$SpawnPlacementCheck": "This event is fired §cwhen Spawn Placements (aka Spawn Rules) are checked§r, before a mob attempts to spawn.\n\nSpawn Placement checks include light levels, slime chunks, grass blocks for animals, and others in the same vein.\n\nThe purpose of this event is to permit runtime changes to any or all spawn placement logic without having to wrap the placement for each entity.\n\nThis event §chas a result§r.\n\nTo change the result of this event, use §a#setResult§r. Results are interpreted in the following manner:\n\nAllow - The check will succeed, and the spawn process will continue.\nDefault - The value of the vanilla check will be used to determine success.\nDeny - The check will fail, and the spawn process will abort.\n\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.\n\nThis event is not fired for mob spawners which utilize §aCustomSpawnRules§r, as they do not check spawn placements.\n@apiNote If your modifications are for a single entity, and do not vary at runtime, use §aSpawnPlacementRegisterEvent§r.\n@see SpawnPlacementRegisterEvent",
	"whodoesthat.events.net.minecraftforge.event.entity.living.PotionColorCalculationEvent": "Fires after Potion Color Calculation.\nthis event is not §aCancelable§r\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.ShieldBlockEvent": "The ShieldBlockEvent is fired when an entity successfully blocks with a shield.\n\nCancelling this event will have the same impact as if the shield was not eligible to block.\n\nThe damage blocked cannot be set lower than zero or greater than the original value.\n\nNote: The shield item stack \"should\" be available from §aLivingEntity#getUseItem()§r\nat least for players.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.ZombieEvent": "ZombieEvent is fired whenever a zombie is spawned for aid.\nIf a method utilizes this event as its parameter, the method will\nreceive every child event of this class.\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.living.ZombieEvent$SummonAidEvent": "SummonAidEvent is fired when a Zombie Entity is summoned.\nThis event is fired whenever a Zombie Entity is summoned in\n§bZombie#actuallyHurt(DamageSource, float)§r.\nThis event is fired via the §aForgeEventFactory#fireZombieSummonAid(Zombie, Level, int, int, int, LivingEntity, double)§r.\n§a#getCustomSummonedAid()§r remains null, but can be populated with a custom EntityZombie which will be spawned.\n§a#getLevel()§r contains the world that this summoning is occurring in.\n§a#getX()§r contains the x-coordinate at which this summoning event is occurring.\n§a#getY()§r contains the y-coordinate at which this summoning event is occurring.\n§a#getZ()§r contains the z-coordinate at which this summoning event is occurring.\n§a#getAttacker()§r contains the living Entity that attacked and caused this event to fire.\n§a#getSummonChance()§r contains the likelihood that a Zombie would successfully be summoned.\nThis event is not §aCancelable§r.\nThis event has a result. §aHasResult§r\n§aResult#ALLOW§r Zombie is summoned.\n§aResult#DENY§r Zombie is not summoned.\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.AdvancementEvent": "Base class used for advancement-related events. Should not be used directly.\n@see AdvancementEarnEvent\n@see AdvancementProgressEvent",
	"whodoesthat.events.net.minecraftforge.event.entity.player.AdvancementEvent$AdvancementEarnEvent": "Fired when the player earns an advancement. An advancement is earned once its requirements are complete.\nNote that advancements may be hidden from the player or used in background mechanics, such as recipe\nadvancements for unlocking recipes in the recipe book.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.\n@see AdvancementProgress#isDone()",
	"whodoesthat.events.net.minecraftforge.event.entity.player.AdvancementEvent$AdvancementProgressEvent": "Fired when the player's progress on an advancement criterion is granted or revoked.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.\n@see AdvancementEarnEvent\n@see net.minecraft.server.PlayerAdvancements#award(Advancement, String)\n@see net.minecraft.server.PlayerAdvancements#revoke(Advancement, String)",
	"whodoesthat.events.net.minecraftforge.event.entity.player.AnvilRepairEvent": "Fired when the player removes a \"repaired\" item from the Anvil's Output slot.\nbreakChance specifies as a percentage the chance that the anvil will be \"damaged\" when used.\nItemStacks are the inputs/output from the anvil. They cannot be edited.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.ArrowLooseEvent": "ArrowLooseEvent is fired when a player stops using a bow.\n\nThis event is fired whenever a player stops using a bow in\n§aBowItem#releaseUsing(ItemStack, Level, LivingEntity, int)§r.\n\n§a#bow§r contains the ItemBow ItemStack that was used in this event.\n\n§a#charge§r contains the value for how much the player had charged before stopping the shot.\n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the player does not stop using the bow.\n\nFor crossbows, the charge will always be 1; Set it to -1 in order to prevent firing the arrow. \n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.ArrowNockEvent": "ArrowNockEvent is fired when a player begins using a bow.\n\nThis event is fired whenever a player begins using a bow in\n§aBowItem#use(Level, Player, InteractionHand)§r.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.AttackEntityEvent": "AttackEntityEvent is fired when a player attacks an Entity.\n\nThis event is fired whenever a player attacks an Entity in\n§aPlayer#attack(Entity)§r.\n\n§a#target§r contains the Entity that was damaged by the player. \n\nThis event is §aCancelable§r.\n\nIf this event is canceled, the player does not attack the Entity.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.BonemealEvent": "This event is called when a player attempts to use Bonemeal on a block.\nIt can be canceled to completely prevent any further processing.\nYou can also set the result to ALLOW to mark the event as processed\nand use up a bonemeal from the stack but do no further processing.\nsetResult(ALLOW) is the same as the old setHandled()",
	"whodoesthat.events.net.minecraftforge.event.entity.player.CriticalHitEvent": "This event is fired whenever a player attacks an Entity in\nEntityPlayer#attackTargetEntityWithCurrentItem(Entity).\n\nThis event is not §aCancelable§r.\n\nThis event has a result. §aHasResult§r\n\nDEFAULT: means the vanilla logic will determine if this a critical hit.\n\nDENY: it will not be a critical hit but the player still will attack\n\nALLOW: this attack is forced to be critical\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.EntityItemPickupEvent": "This event is called when a player collides with a EntityItem on the ground.\nThe event can be canceled, and no further processing will be done.\nYou can set the result of this event to ALLOW which will trigger the\nprocessing of achievements, FML's event, play the sound, and kill the\nentity if all the items are picked up.\nsetResult(ALLOW) is the same as the old setHandled()",
	"whodoesthat.events.net.minecraftforge.event.entity.player.FillBucketEvent": "This event is fired when a player attempts to use a Empty bucket, it\ncan be canceled to completely prevent any further processing.\nIf you set the result to 'ALLOW', it means that you have processed\nthe event and wants the basic functionality of adding the new\nItemStack to your inventory and reducing the stack size to process.\nsetResult(ALLOW) is the same as the old setHandled();",
	"whodoesthat.events.net.minecraftforge.event.entity.player.ItemFishedEvent": "This event is called when a player fishes an item.\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r\nCanceling the event will cause the player to receive no items at all.\nThe hook will still take the damage specified",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PermissionsChangedEvent": "This event will fire when the player is opped or deopped.\n\nThis event is cancelable which will stop the op or deop from happening.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerDestroyItemEvent": "PlayerDestroyItemEvent is fired when a player destroys an item.\n\nThis event is fired whenever a player destroys an item in\n§aMultiPlayerGameMode#destroyBlock(BlockPos)§r,\n§aMultiPlayerGameMode#useItem(Player, InteractionHand)§r,\n§aMultiPlayerGameMode#useItemOn(LocalPlayer, InteractionHand, BlockHitResult)§r ,\n§aPlayer#attack(Entity)§r,\n§bPlayer#hurtCurrentlyUsedShield(float)§r,\n§aPlayer#interactOn(Entity, InteractionHand)§r,\n§aForgeHooks#getCraftingRemainingItem(ItemStack)§r,\n§aServerPlayerGameMode#useItem(ServerPlayer, Level, ItemStack, InteractionHand)§r ,\n§aServerPlayerGameMode#useItemOn(ServerPlayer, Level, ItemStack, InteractionHand, BlockHitResult)§r\nand §aServerPlayerGameMode#destroyBlock(BlockPos)§r.\n\n§a#original§r contains the original ItemStack before the item was destroyed. \n\n(@link #hand) contains the hand that the current item was held in.\n\nThis event is not §aCancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired from §aForgeEventFactory#onPlayerDestroyItem(Player, ItemStack, InteractionHand)§r.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent": "PlayerEvent is fired whenever an event involving a §aPlayer§r occurs. \n\nIf a method utilizes this §anet.minecraftforge.eventbus.api.Event§r as its parameter, the method will\nreceive every child event of this class.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$BreakSpeed": "BreakSpeed is fired when a player attempts to harvest a block.\n\nThis event is fired whenever a player attempts to harvest a block in\n§aPlayer#getDigSpeed(BlockState, BlockPos)§r.\n\nThis event is fired via the §aForgeEventFactory#getBreakSpeed(Player, BlockState, float, BlockPos)§r.\n\n§a#state§r contains the block being broken. \n\n§a#originalSpeed§r contains the original speed at which the player broke the block. \n\n§a#newSpeed§r contains the newSpeed at which the player will break the block. \n\n§a#pos§r contains the coordinates at which this event is occurring. Optional value.\n\nThis event is §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nIf it is canceled, the player is unable to break the block.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$Clone": "Fired when the EntityPlayer is cloned, typically caused by the impl sending a RESPAWN_PLAYER event.\nEither caused by death, or by traveling from the End to the overworld.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$HarvestCheck": "HarvestCheck is fired when a player attempts to harvest a block.\n\nThis event is fired whenever a player attempts to harvest a block in\n§aPlayer#hasCorrectToolForDrops(BlockState)§r.\n\nThis event is fired via the §aForgeEventFactory#doPlayerHarvestCheck(Player, BlockState, boolean)§r.\n\n§a#state§r contains the §aBlockState§r that is being checked for harvesting. \n\n§a#success§r contains the boolean value for whether the Block will be successfully harvested. \n\nThis event is not §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$LoadFromFile": "The player is being loaded from the world save. Note that the\nplayer won't have been added to the world yet. Intended to\nallow mods to load an additional file from the players directory\ncontaining additional mod related player data.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$NameFormat": "NameFormat is fired when a player's display name is retrieved.\n\nThis event is fired whenever a player's name is retrieved in\n§aPlayer#getDisplayName()§r or §aPlayer#refreshDisplayName()§r.\n\nThis event is fired via the §aForgeEventFactory#getPlayerDisplayName(Player, Component)§r.\n\n§a#username§r contains the username of the player.\n§a#displayname§r contains the display name of the player.\n\nThis event is not §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$PlayerChangeGameModeEvent": "Fired when the game type of a server player is changed to a different value than what it was previously. Eg Creative to Survival, not Survival to Survival.\nIf the event is cancelled the game mode of the player is not changed and the value of newGameMode is ignored.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$SaveToFile": "The player is being saved to the world store. Note that the\nplayer may be in the process of logging out or otherwise departing\nfrom the world. Don't assume it's association with the world.\nThis allows mods to load an additional file from the players directory\ncontaining additional mod related player data.\n\nUse this event to save the additional mod related player data to the world.\nWARNING: Do not overwrite the player's .dat file here. You will\ncorrupt the world state.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$StartTracking": "Fired when an Entity is started to be \"tracked\" by this player (the player receives updates about this entity, e.g. motion).",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$StopTracking": "Fired when an Entity is stopped to be \"tracked\" by this player (the player no longer receives updates about this entity, e.g. motion).",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerEvent$TabListNameFormat": "TabListNameFormat is fired when a player's display name for the tablist is retrieved.\n\nThis event is fired whenever a player's display name for the tablist is retrieved in\n§aServerPlayer#getTabListDisplayName()§r or §aServerPlayer#refreshTabListName()§r.\n\nThis event is fired via the §aForgeEventFactory#getPlayerTabListDisplayName(Player)§r.\n\n§a#getDisplayName()§r contains the display name of the player or null if the client should determine the display name itself.\n\nThis event is not §anet.minecraftforge.eventbus.api.Cancelable§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerFlyableFallEvent": "Occurs when a player falls, but is able to fly.  Doesn't need to be cancelable, this is mainly for notification purposes.\n@author Mithion",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent": "PlayerInteractEvent is fired when a player interacts in some way.\nAll subclasses are fired on §aMinecraftForge#EVENT_BUS§r.\nSee the individual documentation on each subevent for more details.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$EntityInteract": "This event is fired on both sides when the player right clicks an entity.\nIt is responsible for all general entity interactions.\nThis event is fired only if the result of the above §aEntityInteractSpecific§r is not §aInteractionResult#SUCCESS§r.\nThis event's state affects whether §aEntity#interact(Player, InteractionHand)§r and\n§aItem#interactLivingEntity(ItemStack, Player, LivingEntity, InteractionHand)§r are called.\nLet result be §aInteractionResult#SUCCESS§r if §aEntity#interact(Player, InteractionHand)§r or\n§aItem#interactLivingEntity(ItemStack, Player, LivingEntity, InteractionHand)§r return true,\nor §a#cancellationResult§r if the event is cancelled.\nIf we are on the client and result is not §aInteractionResult#SUCCESS§r, the client will then try §aRightClickItem§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$EntityInteractSpecific": "This event is fired on both sides whenever a player right clicks an entity.\n\"Interact at\" is an interact where the local vector (which part of the entity you clicked) is known.\nThe state of this event affects whether §aEntity#interactAt(Player, Vec3, InteractionHand)§r is called.\nLet result be the return value of §aEntity#interactAt(Player, Vec3, InteractionHand)§r, or §a#cancellationResult§r if the event is cancelled.\nIf we are on the client and result is not §aInteractionResult#SUCCESS§r, the client will then try §aEntityInteract§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$LeftClickBlock": "This event is fired when a player left clicks while targeting a block.\nThis event controls which of §aBlock#attack(BlockState, Level, BlockPos, Player)§r and/or the item harvesting methods will be called\nCanceling the event will cause none of the above noted methods to be called.\nThere are various results to this event, see the getters below.\nThis event is fired at various points during left clicking on blocks, at both the start and end on the server, and at the start and while held down on the client.\nUse §a#getAction()§r to check which type of action triggered this event.\nNote that if the event is canceled and the player holds down left mouse, the event will continue to fire.\nThis is due to how vanilla calls the left click handler methods.\nAlso note that creative mode directly breaks the block without running any other logic.\nTherefore, in creative mode, §a#setUseBlock§r and §a#setUseItem§r have no effect.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$LeftClickEmpty": "This event is fired on the client side when the player left clicks empty space with any ItemStack.\nThe server is not aware of when the client left clicks empty space, you will need to tell the server yourself.\nThis event cannot be canceled.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$RightClickBlock": "This event is fired on both sides whenever the player right clicks while targeting a block. \n\nThis event controls which of §aItem#onItemUseFirst§r, §aBlock#use(BlockState, Level, BlockPos, Player, InteractionHand, BlockHitResult)§r,\nand §aItem#useOn(UseOnContext)§r will be called. \n\nCanceling the event will cause none of the above three to be called. \n\nLet result be the first non-pass return value of the above three methods, or pass, if they all pass. \n\nOr §a#cancellationResult§r if the event is cancelled. \n\nIf result equals §aInteractionResult#PASS§r, we proceed to §aRightClickItem§r.  \n\nThere are various results to this event, see the getters below.  \n\nNote that handling things differently on the client vs server may cause desynchronizations!",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$RightClickEmpty": "This event is fired on the client side when the player right clicks empty space with an empty hand.\nThe server is not aware of when the client right clicks empty space with an empty hand, you will need to tell the server yourself.\nThis event cannot be canceled.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerInteractEvent$RightClickItem": "This event is fired on both sides before the player triggers §aItem#use(Level, Player, InteractionHand)§r.\nNote that this is NOT fired if the player is targeting a block §aRightClickBlock§r or entity §aEntityInteract§r §aEntityInteractSpecific§r.\nLet result be the return value of §aItem#use(Level, Player, InteractionHand)§r, or §a#cancellationResult§r if the event is cancelled.\nIf we are on the client and result is not §aInteractionResult#SUCCESS§r, the client will then continue to other hands.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerNegotiationEvent": "This event is fired on the server when a connection has started the Forge handshake,\nForge will wait for all enqueued work to be completed before proceeding further with the login process.\n\nThis event can be used to delay the player login until any necessary work such as preloading user data has completed.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerSetSpawnEvent": "This event is fired when a player's spawn point is set or reset.\n\nThe event can be canceled, which will prevent the spawn point from being changed.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerSleepInBedEvent": "PlayerSleepInBedEvent is fired when a player sleeps in a bed.\n\nThis event is fired whenever a player sleeps in a bed in\n§aPlayer#startSleeping(BlockPos)§r.\n\n§a#result§r contains whether the player is able to sleep. \n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerSpawnPhantomsEvent": "This event is fired from §aPhantomSpawner#tick§r, once per player, when phantoms would attempt to be spawned.\n\nThis event is not fired for spectating players.\n\nThis event is fired before any per-player checks (but after §aPlayer#isSpectator()§r), but after all global checks.\n\nThe behavior of §aPhantomSpawner§r is determined by the result of this event.\n\nSee §a#setResult§r for documentation.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.\n\n@see PlayerSpawnPhantomsEvent#setResult for the effects of each result.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerWakeUpEvent": "This event is fired when the player is waking up.\n\nThis is merely for purposes of listening for this to happen.\n\nThere is nothing that can be manipulated with this event.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerXpEvent": "PlayerXpEvent is fired whenever an event involving player experience occurs. \n\nIf a method utilizes this §anet.minecraftforge.eventbus.api.Event§r as its parameter, the method will\nreceive every child event of this class.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerXpEvent$LevelChange": "This event is fired when the player's experience level changes through the §aPlayer#giveExperienceLevels(int)§r method.\nIt can be cancelled, and no further processing will be done.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerXpEvent$PickupXp": "This event is fired after the player collides with an experience orb, but before the player has been given the experience.\nIt can be cancelled, and no further processing will be done.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.PlayerXpEvent$XpChange": "This event is fired when the player's experience changes through the §aPlayer#giveExperiencePoints(int)§r method.\nIt can be cancelled, and no further processing will be done.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.SleepingLocationCheckEvent": "This event is fired when game checks, if sleeping player should be still considered \"in bed\".\n\nFailing this check will cause player to wake up.\nThis event has a result. §aHasResult§r\nsetResult(ALLOW) informs game that player is still \"in bed\"\n\nsetResult(DEFAULT) causes game to check §aBlock#isBed(BlockState, BlockGetter, BlockPos, Entity)§r instead",
	"whodoesthat.events.net.minecraftforge.event.entity.player.SleepingTimeCheckEvent": "This event is fired when the game checks if players can sleep at this time.\n\nFailing this check will cause sleeping players to wake up and prevent awake players from sleeping.\nThis event has a result. §aHasResult§r\nsetResult(ALLOW) informs game that player can sleep at this time.\n\nsetResult(DEFAULT) causes game to check !§aLevel#isDay()§r instead.",
	"whodoesthat.events.net.minecraftforge.event.entity.player.TradeWithVillagerEvent": "Fired when a player trades with an §aAbstractVillager§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.furnace.FurnaceFuelBurnTimeEvent": "§aFurnaceFuelBurnTimeEvent§r is fired when determining the fuel value for an ItemStack. \n\nTo set the burn time of your own item, use §aItem#getBurnTime(ItemStack, RecipeType)§r instead.\n\nThis event is fired from §aForgeEventFactory#getItemBurnTime(ItemStack, int, RecipeType)§r.\n\nThis event is §aCancelable§r to prevent later handlers from changing the value.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.level.AlterGroundEvent": "This event is fired when §anet.minecraft.world.level.levelgen.feature.treedecorators.AlterGroundDecorator#placeBlockAt(TreeDecorator.Context, BlockPos)§r\nattempts to alter a ground block when generating a feature. An example of this would be large spruce trees converting grass blocks into podzol.\n\nThis event is not §ccancellable§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$BlockToolModificationEvent": "Fired when a block is right-clicked by a tool to change its state.\nFor example: Used to determine if §aToolActions#AXE_STRIP an axe can strip§r,\n§aToolActions#SHOVEL_FLATTEN a shovel can path§r, or §aToolActions#HOE_TILL a hoe can till§r.\n\nCare must be taken to ensure level-modifying events are only performed if §a#isSimulated()§r returns §bfalse§r.\n\nThis event is §aCancelable§r. If canceled, this will prevent the tool\nfrom changing the block's state.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$BreakEvent": "Event that is fired when an Block is about to be broken by a player\nCanceling this event will prevent the Block from being broken.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$CreateFluidSourceEvent": "Fired to check whether a non-source block can turn into a source block.\nA result of ALLOW causes a source block to be created even if the liquid\nusually doesn't do that (like lava), and a result of DENY prevents creation\neven if the liquid usually does do that (like water).",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$CropGrowEvent": "Fired when a crop block grows.  See subevents.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$EntityMultiPlaceEvent": "Fired when a single block placement triggers the\ncreation of multiple blocks(e.g. placing a bed block). The block returned\nby §a#state§r and its related methods is the block where\nthe placed block would exist if the placement only affected a single\nblock.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$EntityPlaceEvent": "Called when a block is placed.\nIf a Block Place event is cancelled, the block will not be placed.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$FarmlandTrampleEvent": "Fired when when farmland gets trampled\nThis event is §aCancelable§r",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$FluidPlaceBlockEvent": "Fired when a liquid places a block. Use §a#setNewState(BlockState)§r to change the result of\na cobblestone generator or add variants of obsidian. Alternatively, you  could execute\narbitrary code when lava sets blocks on fire, even preventing it.\n§a#getState()§r will return the block that was originally going to be placed.\n§a#getPos()§r will return the position of the block to be changed.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$NeighborNotifyEvent": "Fired when a physics update occurs on a block. This event acts as\na way for mods to detect physics updates, in the same way a BUD switch\ndoes. This event is only called on the server.",
	"whodoesthat.events.net.minecraftforge.event.level.BlockEvent$PortalSpawnEvent": "Fired when an attempt is made to spawn a nether portal from\n§aBaseFireBlock#onPlace(BlockState, Level, BlockPos, BlockState, boolean)§r.\nIf cancelled, the portal will not be spawned.",
	"whodoesthat.events.net.minecraftforge.event.level.ChunkDataEvent": "ChunkDataEvent is fired when an event involving chunk data occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#data§r contains the NBTTagCompound containing the chunk data for this event.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ChunkEvent": "ChunkEvent is fired when an event involving a chunk occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#chunk§r contains the Chunk this event is affecting.\n\nAll children of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ChunkTicketLevelUpdatedEvent": "This event is fired whenever a chunk has its ticket level changed via the server's ChunkMap.\n\nThis event does not fire if the new ticket level is the same as the old level, or if both the\nnew AND old ticket levels represent values past the max chunk distance.\n\nDue to how vanilla processes ticket level changes this event may be fired \"twice\" in one tick for the same chunk.\nThe scenario where this happens is when increasing the level from say 31 (ticking) to 32, the way vanilla does it\nis by first changing it from 31 to 46, and then queuing the update from 46 to 32. However, when going from 32 to 31,\nvanilla is able to go directly.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ChunkWatchEvent": "This event is fired whenever a chunk has a watch-related action.\n\nThe §cplayer§r's level may not be the same as the §clevel of the chunk§r\nwhen the player is teleporting to another dimension.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ChunkWatchEvent$UnWatch": "This event is fired whenever a §aServerPlayer§r stops watching a chunk.\n\nThis event is fired when a chunk is removed from the watched chunks of an §aServerPlayer§r\nin §bnet.minecraft.server.level.ChunkMap#updateChunkTracking(ServerPlayer, ChunkPos, Packet[], boolean, boolean)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ChunkWatchEvent$Watch": "This event is fired whenever a §aServerPlayer§r begins watching a chunk.\n\nThis event is fired when a chunk is added to the watched chunks of a §aServerPlayer§r\nand the chunk's data is sent to the client (see\n§bnet.minecraft.server.level.ChunkMap#playerLoadedChunk(ServerPlayer, MutableObject, LevelChunk)§r).\n\nThis event may be used to send additional chunk-related data to the client.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ExplosionEvent": "ExplosionEvent triggers when an explosion happens in the level.\n\nExplosionEvent.Start is fired before the explosion actually occurs.\n\nExplosionEvent.Detonate is fired once the explosion has a list of affected blocks and entities.\n\nExplosionEvent.Start is §aCancelable§r.\n\nExplosionEvent.Detonate can modify the affected blocks and entities.\n\nChildren do not use §aHasResult§r.\n\nChildren of this event are fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ExplosionEvent$Detonate": "ExplosionEvent.Detonate is fired once the explosion has a list of affected blocks and entities.  These lists can be modified to change the outcome.\n\nThis event is not §aCancelable§r.\n\nThis event does not use §aHasResult§r.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.level.ExplosionEvent$Start": "ExplosionEvent.Start is fired before the explosion actually occurs.  Canceling this event will stop the explosion.\n\nThis event is §aCancelable§r.\n\nThis event does not use §aHasResult§r.\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.level.LevelEvent": "This event is fired whenever an event involving a §aLevelAccessor§r occurs.\n\nAll children of this event are fired on the §cmain Forge event bus§r.",
	"whodoesthat.events.net.minecraftforge.event.level.LevelEvent$CreateSpawnPosition": "This event fires whenever a §aServerLevel§r is initialized for the first time\nand a spawn position needs to be chosen.\n\nThis event is §ccancellable§r and does not §chave a result§r.\nIf the event is canceled, the vanilla logic to choose a spawn position will be skipped.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.\n@see ServerLevelData#isInitialized()",
	"whodoesthat.events.net.minecraftforge.event.level.LevelEvent$Load": "This event is fired whenever a level loads.\nThis event is fired whenever a level loads in ClientLevel's constructor and\n{@literal MinecraftServer#createLevels(ChunkProgressListener)}.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.minecraftforge.event.level.LevelEvent$PotentialSpawns": "Fired when building a list of all possible entities that can spawn at the specified location.\nIf an entry is added to the list, it needs to be a globally unique instance.\nThe event is called in {@link net.minecraft.world.level.NaturalSpawner#mobsAt(ServerLevel,\nStructureManager, ChunkGenerator, MobCategory, RandomSource, BlockPos)}.\nThis event is §ccancellable§r, and does not §chave a result§r.\nCanceling the event will result in an empty list, meaning no entity will be spawned.",
	"whodoesthat.events.net.minecraftforge.event.level.LevelEvent$Save": "This event fires whenever a level is saved.\nThis event is fired when a level is saved in\n§aServerLevel#save(ProgressListener, boolean, boolean)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.minecraftforge.event.level.LevelEvent$Unload": "This event is fired whenever a level unloads.\nThis event is fired whenever a level unloads in\n§aMinecraft#setLevel(ClientLevel)§r,\n§aMinecraftServer#stopServer()§r,\n§aMinecraft#clearLevel(Screen)§r, and\n§aForgeInternalHandler#onDimensionUnload(Unload)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.minecraftforge.event.level.NoteBlockEvent": "Base class for Noteblock Events",
	"whodoesthat.events.net.minecraftforge.event.level.NoteBlockEvent$Change": "Fired when a Noteblock is changed. You can adjust the note it will change to via §a#setNote(Note, Octave)§r.\nCanceling this event will not change the note and also stop the Noteblock from playing it's note.",
	"whodoesthat.events.net.minecraftforge.event.level.NoteBlockEvent$Play": "Fired when a Noteblock plays it's note. You can override the note and instrument\nCanceling this event will stop the note from playing.",
	"whodoesthat.events.net.minecraftforge.event.level.PistonEvent": "Base piston event, use §aPistonEvent.Post§r and §aPistonEvent.Pre§r",
	"whodoesthat.events.net.minecraftforge.event.level.PistonEvent$Post": "Fires after the piston has moved and set surrounding states. This will not fire if §aPistonEvent.Pre§r is cancelled.",
	"whodoesthat.events.net.minecraftforge.event.level.PistonEvent$Pre": "Fires before the piston has updated block states. Cancellation prevents movement.",
	"whodoesthat.events.net.minecraftforge.event.level.SleepFinishedTimeEvent": "This event is fired when all players are asleep and the time should be set to day.\nsetWakeUpTime(wakeUpTime) sets a new time that will be added to the dayTime.",
	"whodoesthat.events.net.minecraftforge.event.server.ServerAboutToStartEvent": "Called before the server begins loading anything. Called after §aInterModProcessEvent§r on the dedicated\nserver, and after the player has hit \"Play Selected World\" in the client. Called before §aServerStartingEvent§r.\nYou can obtain a reference to the server with this event.\n@author cpw",
	"whodoesthat.events.net.minecraftforge.event.server.ServerStartedEvent": "Called after §aServerStartingEvent§r when the server is available and ready to play.\n@author cpw",
	"whodoesthat.events.net.minecraftforge.event.server.ServerStartingEvent": "Called after §aServerAboutToStartEvent§r and before §aServerStartedEvent§r.\nThis event allows for customizations of the server.\nIf you need to add commands use §anet.minecraftforge.event.RegisterCommandsEvent§r.\n@author cpw",
	"whodoesthat.events.net.minecraftforge.event.server.ServerStoppedEvent": "Called after §aServerStoppingEvent§r when the server has completely shut down.\nCalled immediately before shutting down, on the dedicated server, and before returning\nto the main menu on the client.\n@author cpw",
	"whodoesthat.events.net.minecraftforge.event.server.ServerStoppingEvent": "Called when the server begins an orderly shutdown, before §aServerStoppedEvent§r.\n@author cpw",
	"whodoesthat.events.net.minecraftforge.event.village.VillageSiegeEvent": "VillageSiegeEvent is fired just before a zombie siege finds a successful location in\n§bVillageSiege#tryToSetupSiege(ServerLevel)§r, to give mods the chance to stop the siege.\n\nThis event is §aCancelable§r; canceling stops the siege.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aMinecraftForge#EVENT_BUS§r.",
	"whodoesthat.events.net.minecraftforge.event.village.VillagerTradesEvent": "VillagerTradesEvent is fired during the §aServerAboutToStartEvent§r.  It is used to gather the trade lists for each profession.\nIt is fired on the §aMinecraftForge#EVENT_BUS§r.\nIt is fired once for each registered villager profession.\nVillagers pick two trades from their trade map, based on their level.\nVillager level is increased by successful trades.\nThe map is populated for levels 1-5 (inclusive), so Map#get will never return null for those keys.\nLevels outside of this range do nothing, as specified by §aVillagerData#canLevelUp(int)§r which is called before attempting to level up.\nTo add trades to the merchant, simply add new trades to the list. §aBasicItemListing§r provides a default implementation.",
	"whodoesthat.events.net.minecraftforge.event.village.WandererTradesEvent": "WandererTradesEvent is fired during the §aServerAboutToStartEvent§r.  It is used to gather the trade lists for the wandering merchant.\nIt is fired on the §aMinecraftForge#EVENT_BUS§r.\nThe wandering merchant picks a few trades from §bgeneric§r and a single trade from §brare§r.\nTo add trades to the merchant, simply add new trades to the list. §aBasicItemListing§r provides a default implementation.",
	"whodoesthat.events.net.minecraftforge.fluids.capability.ItemFluidContainer": "A simple fluid container, to replace the functionality of the old FluidContainerRegistry and IFluidContainerItem.\nThis fluid container may be set so that is can only completely filled or empty. (binary)\nIt may also be set so that it gets consumed when it is drained. (consumable)",
	"whodoesthat.events.net.minecraftforge.fml.event.config.ModConfigEvent$Loading": "Fired during mod and server loading, depending on §aModConfig.Type§r of config file.\nAny Config objects associated with this will be valid and can be queried directly.",
	"whodoesthat.events.net.minecraftforge.fml.event.config.ModConfigEvent$Reloading": "Fired when the configuration is changed. This can be caused by a change to the config\nfrom a UI or from editing the file itself. IMPORTANT: this can fire at any time\nand may not even be on the server or client threads. Ensure you properly synchronize\nany resultant changes.",
	"whodoesthat.events.net.minecraftforge.fml.event.config.ModConfigEvent$Unloading": "Fired when a config is unloaded. This only happens when the server closes, which is\nprobably only really relevant on the client, to reset internal mod state when the\nserver goes away, though it will fire on the dedicated server as well.\nThe config file will be saved after this event has fired.",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent": "This is the second of four commonly called events during mod lifecycle startup.\nCalled before §aInterModEnqueueEvent§r\nCalled after §aFMLCommonSetupEvent§r\nCalled on §anet.minecraftforge.api.distmarker.Dist#CLIENT§r - the game client.\nAlternative to §aFMLDedicatedServerSetupEvent§r.\nDo client only setup with this event, such as KeyBindings.\nThis is a parallel dispatch event.",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent": "This is the first of four commonly called events during mod initialization.\nCalled after §anet.minecraftforge.registries.RegisterEvent§r events have been fired and before\n§aFMLClientSetupEvent§r or §aFMLDedicatedServerSetupEvent§r during mod startup.\nEither register your listener using §anet.minecraftforge.fml.javafmlmod.AutomaticEventSubscriber§r and\n§anet.minecraftforge.eventbus.api.SubscribeEvent§r or\n§anet.minecraftforge.eventbus.api.IEventBus#addListener(Consumer)§r in your constructor.\nMost non-specific mod setup will be performed here. Note that this is a parallel dispatched event - you cannot\ninteract with game state in this event.\n@see DeferredWorkQueue to enqueue work to run on the main game thread after this event has\ncompleted dispatch",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.FMLDedicatedServerSetupEvent": "This is the second of four commonly called events during mod core startup.\nCalled before §aInterModEnqueueEvent§r\nCalled after §aFMLCommonSetupEvent§r\nCalled on §anet.minecraftforge.api.distmarker.Dist#DEDICATED_SERVER§r - the dedicated game server.\nAlternative to §aFMLClientSetupEvent§r.\nDo dedicated server specific activities with this event.\nThis event is fired before construction of the dedicated server. Use §bFMLServerAboutToStartEvent§r\nor §bFMLServerStartingEvent§r to do stuff with the server, in both dedicated\nand integrated server contexts\nThis is a parallel dispatch event.",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.FMLLoadCompleteEvent": "This is a mostly internal event fired to mod containers that indicates that loading is complete. Mods should not\nin general override or otherwise attempt to implement this event.\n@author cpw",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.InterModEnqueueEvent": "This is the third of four commonly called events during mod core startup.\nCalled before §aInterModProcessEvent§r\nCalled after §aFMLClientSetupEvent§r or §aFMLDedicatedServerSetupEvent§r\nEnqueue §anet.minecraftforge.fml.InterModComms§r messages to other mods with this event.\nThis is a parallel dispatch event.",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.InterModProcessEvent": "This is the fourth of four commonly called events during mod core startup.\nCalled after §aInterModEnqueueEvent§r\nRetrieve §anet.minecraftforge.fml.InterModComms§r §anet.minecraftforge.fml.InterModComms.IMCMessage§r suppliers\nand process them as you wish with this event.\nThis is a parallel dispatch event.\n@see #getIMCStream()\n@see #getIMCStream(Predicate)",
	"whodoesthat.events.net.minecraftforge.fml.event.lifecycle.ModLifecycleEvent": "Parent type to all ModLifecycle events. This is based on Forge EventBus. They fire through the\nModContainer's eventbus instance.",
	"whodoesthat.events.net.minecraftforge.network.NetworkEvent$ChannelRegistrationChangeEvent": "Fired when the channel registration (see minecraft custom channel documentation) changes. Note the payload\nis not exposed. This fires to the resource location that owns the channel, when it's registration changes state.\nIt seems plausible that this will fire multiple times for the same state, depending on what the server is doing.\nIt just directly dispatches upon receipt.",
	"whodoesthat.events.net.minecraftforge.registries.DataPackRegistryEvent$NewRegistry": "Fired when datapack registries can be registered.\nDatapack registries are registries which can only load entries through JSON files from datapacks.\n\nData JSONs will be loaded from §bdata//modid/registryname/§r, where §bmodid§r is the namespace of the registry key.\n\nThis event is not §ccancellable§r, and does not §chave a result§r.\n\nThis event is fired on the §cmod-specific event bus§r,\non both §clogical sides§r.",
	"whodoesthat.events.net.minecraftforge.registries.IdMappingEvent": "Called whenever the ID mapping might have changed. If you register for this event, you\nwill be called back whenever the client or server loads an ID set. This includes both\nwhen the ID maps are loaded from disk, as well as when the ID maps revert to the initial\nstate.\n\nNote: you cannot change the IDs that have been allocated, but you might want to use\nthis event to update caches or other in-mod artifacts that might be impacted by an ID\nchange.\n\nFired on the §anet.minecraftforge.common.MinecraftForge#EVENT_BUS forge bus§r.",
	"whodoesthat.events.net.minecraftforge.registries.MissingMappingsEvent": "Fired on the §anet.minecraftforge.common.MinecraftForge#EVENT_BUS forge bus§r.",
	"whodoesthat.events.net.minecraftforge.registries.NewRegistryEvent": "Register new registries when you receive this event through §aRegistryBuilder§r and §a#create(RegistryBuilder)§r.",
	"whodoesthat.events.net.minecraftforge.registries.RegisterEvent": "This event fires for each forge and vanilla registry when all registries are ready to have modded objects registered.\n\nFired on the §aIModBusEvent mod bus§r.\n@see #register(ResourceKey, ResourceLocation, Supplier)\n@see #register(ResourceKey, Consumer)",
	"whodoesthat.events.net.minecraftforge.server.permission.events.PermissionGatherEvent": "Fired to gather information for the permissions API, such as the §aIPermissionHandler§r and §aPermissionNode§rs.\n§aHandler§r allows to set a new PermissionHandler\n\n§aNodes§r allows you to register new PermissionNodes\nNote: All PermissionNodes that you want to use, must be registered!",
	"whodoesthat.events.net.minecraftforge.server.permission.events.PermissionGatherEvent$Handler": "Used to register a new PermissionHandler, a server config value exists to choose which one to use.\n\nNote: Create a new instance when registering a PermissionHandler.\nIf you cache it, make sure that your PermissionHandler is actually used after this event.",
	"whodoesthat.events.net.minecraftforge.server.permission.events.PermissionGatherEvent$Nodes": "Used to register your PermissionNodes, every node that you want to use, must be registered!",
	"whodoesthat.events.net.neoforged.fml.event.config.ModConfigEvent$Loading": "Fired during mod and server loading, depending on §aModConfig.Type§r of config file.\nAny Config objects associated with this will be valid and can be queried directly.",
	"whodoesthat.events.net.neoforged.fml.event.config.ModConfigEvent$Reloading": "Fired when the configuration is changed. This can be caused by a change to the config\nfrom a UI or from editing the file itself. IMPORTANT: this can fire at any time\nand may not even be on the server or client threads. Ensure you properly synchronize\nany resultant changes.",
	"whodoesthat.events.net.neoforged.fml.event.config.ModConfigEvent$Unloading": "Fired when a config is unloaded. This only happens when the server closes, which is\nprobably only really relevant on the client, to reset internal mod state when the\nserver goes away, though it will fire on the dedicated server as well.\nThe config file will be saved after this event has fired.",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.FMLClientSetupEvent": "This is the second of four commonly called events during mod lifecycle startup.\nCalled before §aInterModEnqueueEvent§r\nCalled after §aFMLCommonSetupEvent§r\nCalled on §anet.neoforged.api.distmarker.Dist#CLIENT§r - the game client.\nAlternative to §aFMLDedicatedServerSetupEvent§r.\nDo client only setup with this event, such as KeyBindings.\nThis is a parallel dispatch event.",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent": "This is the first of four commonly called events during mod initialization.\nCalled after §anet.neoforged.registries.RegisterEvent§r events have been fired and before\n§aFMLClientSetupEvent§r or §aFMLDedicatedServerSetupEvent§r during mod startup.\nEither register your listener using §anet.neoforged.fml.javafmlmod.AutomaticEventSubscriber§r and\n§anet.neoforged.bus.api.SubscribeEvent§r or\n§anet.neoforged.bus.api.IEventBus#addListener(Consumer)§r in your constructor.\nMost non-specific mod setup will be performed here. Note that this is a parallel dispatched event - you cannot\ninteract with game state in this event.\n@see DeferredWorkQueue to enqueue work to run on the main game thread after this event has\ncompleted dispatch",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.FMLDedicatedServerSetupEvent": "This is the second of four commonly called events during mod core startup.\nCalled before §aInterModEnqueueEvent§r\nCalled after §aFMLCommonSetupEvent§r\nCalled on §anet.neoforged.api.distmarker.Dist#DEDICATED_SERVER§r - the dedicated game server.\nAlternative to §aFMLClientSetupEvent§r.\nDo dedicated server specific activities with this event.\nThis event is fired before construction of the dedicated server. Use §bFMLServerAboutToStartEvent§r\nor §bFMLServerStartingEvent§r to do stuff with the server, in both dedicated\nand integrated server contexts\nThis is a parallel dispatch event.",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.FMLLoadCompleteEvent": "This is a mostly internal event fired to mod containers that indicates that loading is complete. Mods should not\nin general override or otherwise attempt to implement this event.\n@author cpw",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.InterModEnqueueEvent": "This is the third of four commonly called events during mod core startup.\nCalled before §aInterModProcessEvent§r\nCalled after §aFMLClientSetupEvent§r or §aFMLDedicatedServerSetupEvent§r\nEnqueue §aInterModComms§r messages to other mods with this event.\nThis is a parallel dispatch event.",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.InterModProcessEvent": "This is the fourth of four commonly called events during mod core startup.\nCalled after §aInterModEnqueueEvent§r\nRetrieve §aInterModComms§r §aInterModComms.IMCMessage§r suppliers\nand process them as you wish with this event.\nThis is a parallel dispatch event.\n@see #getIMCStream()\n@see #getIMCStream(Predicate)",
	"whodoesthat.events.net.neoforged.fml.event.lifecycle.ModLifecycleEvent": "Parent type to all ModLifecycle events. This is based on Forge EventBus. They fire through the\nModContainer's eventbus instance.",
	"whodoesthat.events.net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent": "Fired to register capability providers at an appropriate time.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.AddAttributeTooltipsEvent": "This event is fired after attribute tooltip lines have been added to an item stack's tooltip in §aAttributeUtil#addAttributeTooltips§r.\n\nIt can be used to add additional tooltip lines adjacent to the attribute lines without having to manually locate the inject point.\n\nThis event may be fired on both the logical client and logical server.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.AddSectionGeometryEvent": "This event can be used to add static geometry to chunk sections. The event is fired on the main client thread\nwhenever a section is queued for (re)building. A rebuild can be triggered manually using e.g.\n§anet.minecraft.client.renderer.LevelRenderer#setSectionDirty(int, int, int)§r.\nWhile the event itself is fired on the main client thread, the renderers registered using\n§anet.neoforged.neoforge.client.event.AddSectionGeometryEvent#addRenderer(net.neoforged.neoforge.client.event.AddSectionGeometryEvent.AdditionalSectionRenderer)§r\nwhile be executed on the thread performing the rebuild, which will typically not be the main thread.\nTherefore, any data from non-thread-safe data structures need to be retrieved during the event handler itself rather\nthan the renderer. A typical usage would look like\n{@code\n@SubscribeEvent\npublic static void addChunkGeometry(AddSectionGeometryEvent ev) {\nif (shouldAddGeometryTo(ev.getLevel(), ev.getSectionOrigin())) {\nfinal var renderingData = getDataOnMainThread(ev.getLevel(), ev.getSectionOrigin());\nev.addRenderer(context -> renderThreadsafe(renderingData, context));\n}\n}\n}\nNote that the renderer is only added if something will actually be rendered in this example. This structure should be\nreplicated whenever the event is used, to allow for optimizations related to entirely empty sections.\nThis event is not §ccancellable§r\nThis event is fired on the §cmain Forge event bus§r, only on the\n§clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.CalculateDetachedCameraDistanceEvent": "Fired for hooking the maximum distance from the player to the camera in third-person view.\nThe ray-cast that reduces this distance based on the blocks around the player is invoked after this event is fired.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.CalculatePlayerTurnEvent": "Fired in §cMouseHandler#turnPlayer()§r when retrieving the values of §cmouse sensitivity§r and §ccinematic camera§r, prior to running calculations on these values.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientChatEvent": "Fired when the client is about to send a chat message to the server.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the chat message will not be sent to the server.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientChatReceivedEvent": "Fired when a chat message is received on the client.\nThis can be used for filtering and detecting messages with specific words or phrases, and suppressing them.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message is not displayed in the chat message window.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ChatType",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientChatReceivedEvent$Player": "Fired when a player chat message is received on the client.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message is not displayed in the chat message window.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ChatType",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientChatReceivedEvent$System": "Fired when a system chat message is received on the client.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message is not displayed in the chat message window or in the overlay.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientPauseChangeEvent": "Fired when game pause state is about to change\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientPlayerChangeGameTypeEvent": "Fired when the client player is notified of a change of §aGameType§r from the server.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientPlayerNetworkEvent": "Fired for different client connectivity events.\nSee the various subclasses to listen for specific events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see LoggingIn\n@see LoggingOut\n@see Clone",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientPlayerNetworkEvent$LoggingIn": "Fired when the client player logs in to the server. The player should be initialized.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientPlayerNetworkEvent$LoggingOut": "Fired when the client player logs out. This event may also fire when a new integrated server is being created.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ClientTickEvent": "Base class of the two client tick events.\n\nFor the event that fires once per frame (instead of per tick), see §aRenderFrameEvent§r.\n@see ClientTickEvent.Pre\n@see ClientTickEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ComputeFovModifierEvent": "Fired after the field of vision (FOV) modifier for the player is calculated to allow developers to adjust it further.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ViewportEvent.ComputeFov",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ContainerScreenEvent": "Fired for hooking into §aAbstractContainerScreen§r events.\nSee the subclasses to listen for specific events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see Render.Foreground\n@see Render.Background",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ContainerScreenEvent$Render$Background": "Fired after the container screen's background layer and elements are drawn.\nThis can be used for rendering new background elements.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ContainerScreenEvent$Render$Foreground": "Fired after the container screen's foreground layer and elements are drawn, but\nbefore rendering the tooltips and the item stack being dragged by the player.\nThis can be used for rendering elements that must be above other screen elements, but\nbelow tooltips and the dragged stack, such as slot or item stack specific overlays.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.CustomizeGuiOverlayEvent": "Fired when an overlay is about to be rendered to the screen to allow the user to modify it.\n@see BossEventProgress\n@see DebugText\n@see Chat",
	"whodoesthat.events.net.neoforged.neoforge.client.event.CustomizeGuiOverlayEvent$BossEventProgress": "Fired before a boss health bar is rendered to the screen.\nThis event is §ccancellable§r, and does not §chave a result§r.\nCancelling this event will prevent the given bar from rendering.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.CustomizeGuiOverlayEvent$Chat": "Fired before the chat messages overlay is rendered to the screen.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.CustomizeGuiOverlayEvent$DebugText": "Fired before textual information is rendered to the debug screen.\nThis can be used to add or remove text information.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.EntityRenderersEvent": "Fired for on different events/actions relating to §centity renderers§r.\nSee the various subclasses for listening to different events.\nThese events are fired on the mod-specific event bus, only on the §clogical client§r.\n@see EntityRenderersEvent.RegisterLayerDefinitions\n@see EntityRenderersEvent.RegisterRenderers\n@see EntityRenderersEvent.AddLayers",
	"whodoesthat.events.net.neoforged.neoforge.client.event.EntityRenderersEvent$AddLayers": "Fired for registering entity renderer layers at the appropriate time, after the entity and player renderers maps\nhave been created.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.EntityRenderersEvent$CreateSkullModels": "Fired for registering additional §cskull models§r at the appropriate time.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.EntityRenderersEvent$RegisterLayerDefinitions": "Fired for registering layer definitions at the appropriate time.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.EntityRenderersEvent$RegisterRenderers": "Fired for registering entity and block entity renderers at the appropriate time.\nFor registering entity renderer layers to existing entity renderers (whether vanilla or registered through this\nevent), listen for the §aAddLayers§r event instead.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.GatherEffectScreenTooltipsEvent": "This event is called when an §aEffectRenderingInventoryScreen§r draws the tooltip lines for a hovered §aMobEffectInstance§r.\nIt can be used to modify the tooltip.\n\nThis event is only fired on the §cphysical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.GatherSkippedAttributeTooltipsEvent": "This event is used to collect the IDs of attribute modifiers that will not be displayed in item tooltips.\n\nIt allows hiding some (or all) of the modifiers, potentially for displaying them in an alternative way (or for hiding information from the player).\n\nThis event may be fired on both the logical client and logical server.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.InputEvent": "Fired when an input is detected from the user's input devices.\nSee the various subclasses to listen for specific devices and inputs.\n@see InputEvent.MouseButton\n@see MouseScrollingEvent\n@see Key\n@see InteractionKeyMappingTriggered",
	"whodoesthat.events.net.neoforged.neoforge.client.event.InputEvent$InteractionKeyMappingTriggered": "Fired when a keymapping that by default involves clicking the mouse buttons is triggered.\nThe key bindings that trigger this event are:\n\nUse Item - defaults to left mouse click\nPick Block - defaults to middle mouse click\nAttack - defaults to right mouse click\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the keymapping's action is not processed further, and the hand will be swung\naccording to §a#shouldSwingHand()§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.InputEvent$Key": "Fired when a keyboard key input occurs, such as pressing, releasing, or repeating a key.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.InputEvent$MouseButton": "Fired when a mouse button is pressed/released. Sub-events get fired §aPre before§r and §aPost after§r this happens.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see the online GLFW documentation\n@see Pre\n@see Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.InputEvent$MouseScrollingEvent": "Fired when a mouse scroll wheel is used outside of a screen and a player is loaded, before being\nprocessed by vanilla.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, then the mouse scroll event will not be processed further.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see the online GLFW documentation",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ModelEvent": "Houses events related to models.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ModelEvent$BakingCompleted": "Fired when the §aModelManager§r is notified of the resource manager reloading.\nCalled after the model registry is set up and cached in the §anet.minecraft.client.renderer.block.BlockModelShaper§r.\n\nThe model registry given by this event is unmodifiable. To modify the model registry, use\n§aModelEvent.ModifyBakingResult§r instead.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ModelEvent$ModifyBakingResult": "Fired while the §aModelManager§r is reloading models, after the model registry is set up, but before it's\npassed to the §anet.minecraft.client.renderer.block.BlockModelShaper§r for caching.\nThis event is fired from a worker thread and it is therefore not safe to access anything outside the\nmodel registry and §aModelBakery§r provided in this event.\n\nThe §aModelManager§r firing this event is not fully set up with the latest data when this event fires and\nmust therefore not be accessed in this event.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ModelEvent$RegisterAdditional": "Fired when the §anet.minecraft.client.resources.model.ModelBakery§r is notified of the resource manager reloading.\nAllows developers to register models to be loaded, along with their dependencies. Models registered through this\nevent must use the §aModelResourceLocation#STANDALONE_VARIANT§r variant.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ModelEvent$RegisterGeometryLoaders": "Allows users to register their own §aIGeometryLoader geometry loaders§r for use in block/item models.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.MovementInputUpdateEvent": "Fired after the player's movement inputs are updated.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RecipesUpdatedEvent": "Fired when the §aRecipeManager§r has received and synced the recipes from the server to the client.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterClientCommandsEvent": "Fired to allow mods to register client commands.\nSome command arguments behave differently for the client commands dispatcher:\n\n§aResourceLocationArgument#getAdvancement(com.mojang.brigadier.context.CommandContext, String)§r only returns\nadvancements that are shown on the advancements screen.\n§aObjectiveArgument#getObjective(com.mojang.brigadier.context.CommandContext, String)§r only returns\nobjectives that are displayed to the player.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see RegisterCommandsEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterClientReloadListenersEvent": "Fired to allow mods to register their reload listeners on the client-side resource manager.\nThis event is fired once during the construction of the §aMinecraft§r instance.\nFor registering reload listeners on the server-side resource manager, see §aAddReloadListenerEvent§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterClientTooltipComponentFactoriesEvent": "Allows users to register custom §anet.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent§r\nfactories for their §anet.minecraft.world.inventory.tooltip.TooltipComponent§r types.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterColorHandlersEvent": "Fired for registering block and item color handlers at the appropriate time.\nSee the two subclasses for registering block or item color handlers.\nThese events are fired on the mod-specific event bus, only on the §clogical client§r.\n@see RegisterColorHandlersEvent.Block\n@see RegisterColorHandlersEvent.Item",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterColorHandlersEvent$ColorResolvers": "Allows registration of custom §aColorResolver§r implementations to be used with\n§anet.minecraft.world.level.BlockAndTintGetter#getBlockTint(BlockPos, ColorResolver)§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterColorHandlersEvent$Item": "Fired for registering item color handlers.\nThe block colors should only be used for referencing or delegating item colors to their respective block\ncolors. Use §aRegisterColorHandlersEvent.Block§r for registering your block color handlers.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterDimensionSpecialEffectsEvent": "Allows users to register custom §aDimensionSpecialEffects§r for their dimensions.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterDimensionTransitionScreenEvent": "Event for registering screen effects when transitioning across dimensions.\nNote that there is a priority order when it comes to what screens are displayed: \n\n- Using registerConditionalEffect has priority over the usual transition effects, and will only fire when travelling to the specified dimension coming from a certain dimension. \n\n- If a dimension has a screen that displays when entering it, that will have priority over a dimension that has one when you leave it. \nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterEntitySpectatorShadersEvent": "Allows users to register custom shaders to be used when the player spectates a certain kind of entity.\nVanilla examples of this are the green effect for creepers and the invert effect for endermen.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterGuiLayersEvent": "Allows users to register custom §aLayeredDraw.Layer layers§r for GUI rendering.\nSee also §aRenderGuiLayerEvent§r to intercept rendering of registered layers.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterItemDecorationsEvent": "Allows users to register custom §cIItemDecorator§r to Items.\nThis event is not §ccancelable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterJsonAnimationTypesEvent": "Allows registering custom §aAnimationTarget§rs and\n§aAnimationChannel.Interpolation interpolation function§rs for loading JSON entity animation files.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent": "Allows users to register custom §anet.minecraft.client.KeyMapping key mappings§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterMaterialAtlasesEvent": "Fired for registering §ctexture atlases§r that will be used with §aMaterial§r or\nother systems which retrieve the atlas via §aMinecraft#getTextureAtlas(ResourceLocation)§r or\n§aModelManager#getAtlas(ResourceLocation)§r.\n\nIf an atlas is registered via this event, then it must NOT be used through a §aTextureAtlasHolder§r.\n\nThis event fires during startup when the §aModelManager§r is constructed.\n\nThis event is not §ccancellable§r.\n\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterNamedRenderTypesEvent": "Allows users to register custom named §aRenderType render types§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterParticleProvidersEvent": "Fired for registering particle providers at the appropriate time.\n§aParticleType§rs must be registered during §aRegisterEvent§r as usual;\nthis event is only for the §aParticleProvider§rs.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterPresetEditorsEvent": "Event for registering §aPresetEditor§r screen factories for world presets.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterRecipeBookCategoriesEvent": "Allows users to register custom categories for the vanilla recipe book, making it usable in modded GUIs.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterRenderBuffersEvent": "Fired to allow mods to register custom §crender buffers§r.\nThis allows to have dedicated §crender buffer§r for each §crender type§r\nthat can filled and rendered in batch\nThis event is fired after the default Minecraft render buffers have been registered.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterShadersEvent": "Fired to allow mods to register custom §cshaders§r.\nThis event is fired after the default Minecraft shaders have been registered.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RegisterSpriteSourceTypesEvent": "Fired to allow mods to register their own {@linkplain SpriteSourceType}.\nThis event is fired once during the construction of the §aMinecraft§r instance or\nbefore datagen when client datagen is enabled.\nThis event is not §ccancellable§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderArmEvent": "Fired before the player's arm is rendered in first person. This is a more targeted version of §aRenderHandEvent§r,\nand can be used to replace the rendering of the player's arm, such as for rendering armor on the arm or outright\nreplacing the arm with armor.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the arm will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderBlockScreenEffectEvent": "Fired before a block texture will be overlaid on the player's view.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the overlay will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderFrameEvent": "Base class of the two render frame events.\n\nThese events can be used to setup and teardown global render state that must persist for the current frame.\n\nFor the event that fires once per client tick (instead of per frame), see §aClientTickEvent§r.\n@see RenderFrameEvent.Pre\n@see RenderFrameEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderGuiEvent": "Fired when the HUD is rendered to the screen.\nSee the two subclasses for listening to the two possible phases.\n@see Pre\n@see Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderGuiLayerEvent": "Fired when a GUI layer is rendered to the screen.\nSee the two subclasses for listening to the two possible phases.\nA layer that is not normally active (for example because the player pressed F1) cannot be forced to render.\nIn such cases, this event will however still fire.\n@see Pre\n@see Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderHandEvent": "Fired before a hand is rendered in the first person view.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the hand will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see RenderArmEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderHighlightEvent": "Fired before a selection highlight is rendered.\nSee the two subclasses to listen for blocks or entities.\n@see Block\n@see Entity",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderHighlightEvent$Block": "Fired before a block's selection highlight is rendered.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, then the selection highlight will not be rendered.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderHighlightEvent$Entity": "Fired before an entity's selection highlight is rendered.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderItemInFrameEvent": "Fired before an item stack is rendered in an item frame.\nThis can be used to prevent normal rendering or add custom rendering.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, then the item stack will not be rendered\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ItemFrameRenderer",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderLevelStageEvent": "Fires at various times during LevelRenderer.renderLevel.\nCheck §a#getStage§r to render during the appropriate time for your use case.\nThis event is not §ccancellable§r, and does not §chave a result§r. \nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r. ",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderLevelStageEvent$RegisterStageEvent": "Use to create a custom §cstages§r.\nFired after the LevelRenderer has been created.\nThis event is not §ccancellable§r, and does not §chave a result§r. \nThis event is fired on the mod-specific event bus, only on the §clogical client§r. ",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderLivingEvent": "Fired when a §aLivingEntity§r is rendered.\nSee the two subclasses to listen for before and after rendering.\nDespite this event's use of generic type parameters, this is not a §anet.neoforged.bus.api.GenericEvent§r,\nand should not be treated as such (such as using generic-specific listeners, which may cause a §aClassCastException§r).\n@param  the living entity that is being rendered\n@param  the model for the living entity\n@see RenderLivingEvent.Pre\n@see RenderLivingEvent.Post\n@see RenderPlayerEvent\n@see LivingEntityRenderer",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderNameTagEvent": "This event is fired before an entity renderer renders the nameplate of an entity.\nIt allows reacting to the render and controlling if the name plate will be rendered, as well as changing the rendered name.\n\nThis event is only fired on the logical client.\n@see EntityRenderer",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderPlayerEvent": "Fired when a player is being rendered.\nSee the two subclasses for listening for before and after rendering.\n@see RenderPlayerEvent.Pre\n@see RenderPlayerEvent.Post\n@see PlayerRenderer",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderTooltipEvent": "Fired during tooltip rendering.\nSee the various subclasses for listening to specific events.\n@see RenderTooltipEvent.GatherComponents\n@see RenderTooltipEvent.Pre\n@see RenderTooltipEvent.Color",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderTooltipEvent$Color": "Fired when the colours for the tooltip background are determined.\nThis can be used to modify the background color and the border's gradient colors.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.RenderTooltipEvent$GatherComponents": "Fired when a tooltip gathers the §aTooltipComponent§rs to be rendered, before any text wrapping or processing.\nThe list of components and the maximum width of the tooltip can be modified through this event.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the list of components will be empty, causing the tooltip to not be rendered and\nthe corresponding §aRenderTooltipEvent.Pre§r and §aRenderTooltipEvent.Color§r to not be fired.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent": "Fired on different events/actions when a §aScreen§r is active and visible.\nSee the various subclasses for listening to different events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see Init\n@see Render\n@see BackgroundRendered\n@see MouseInput\n@see KeyInput",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$BackgroundRendered": "Fired directly after the background of the screen is drawn. (Only when the screen calls §aScreen#renderBackground§r)\nCan be used for drawing above the background but below the tooltips.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@deprecated Planned on being removed in 1.21.1 due to extreme maintenance burden to make this event fire consistently for most screens.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$CharacterTyped": "Fired when a keyboard key corresponding to a character is typed.\nSee the two subclasses for listening before and after the normal handling.\n@see CharacterTyped.Pre\n@see CharacterTyped.Post\n@see the online GLFW documentation",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$Closing": "Fired before a §aScreen§r is closed.\nAll screen layers on the screen are closed before this event is fired.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$Init": "Fired when a screen is being initialized.\nSee the two subclasses for listening before and after the initialization.\nListeners added through this event may also be marked as renderable or narratable, if they inherit from\n§anet.minecraft.client.gui.components.Renderable§r and §anet.minecraft.client.gui.narration.NarratableEntry§r\nrespectively.\n@see Init.Pre\n@see Init.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$KeyInput": "Fired whenever a keyboard key is pressed or released.\nSee the various subclasses to listen for key pressing or releasing.\n@see KeyPressed\n@see KeyReleased\n@see InputConstants\n@see the online GLFW documentation",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$KeyPressed": "Fired when a keyboard key is pressed.\nSee the two subclasses for listening before and after the normal handling.\n@see KeyPressed.Pre\n@see KeyPressed.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$KeyReleased": "Fired when a keyboard key is released.\nSee the two subclasses for listening before and after the normal handling.\n@see KeyReleased.Pre\n@see KeyReleased.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$MouseButtonPressed": "Fired when a mouse button is pressed.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseButtonPressed.Pre\n@see MouseButtonPressed.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$MouseButtonReleased": "Fired when a mouse button is released.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseButtonReleased.Pre\n@see MouseButtonReleased.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$MouseDragged": "Fired when the mouse was dragged while a button is being held down.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseDragged.Pre\n@see MouseDragged.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$MouseInput": "Fired whenever an action is performed by the mouse.\nSee the various subclasses to listen for different actions.\n@see MouseButtonPressed\n@see MouseButtonReleased\n@see MouseDragged\n@see MouseScrolled",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$MouseScrolled": "Fired when the mouse was dragged while a button is being held down.\nSee the two subclasses for listening before and after the normal handling.\n@see MouseScrolled.Pre\n@see MouseScrolled.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$Opening": "Fired before any §aScreen§r is opened, to allow changing it or preventing it from being opened.\nAll screen layers on the screen are closed before this event is fired.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the §bScreen§r shall be prevented from opening and any previous screen\nwill remain open. However, cancelling this event will not prevent the closing of screen layers which happened before\nthis event fired.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$Render": "Fired when a screen is being drawn.\nSee the two subclasses for listening before and after drawing.\n@see Render.Pre\n@see Render.Post",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenEvent$RenderInventoryMobEffects": "Fired ahead of rendering any active mob effects in the §aEffectRenderingInventoryScreen inventory screen§r.\nCan be used to select the size of the effects display (full or compact) or even hide or replace vanilla's rendering entirely.\nThis event can also be used to modify the horizontal position of the stack of effects being rendered.\nThis event is §ccancellable§r and does not §chave a result§r.\nCancelling this event will prevent vanilla rendering.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ScreenshotEvent": "Fired when a screenshot is taken, but before it is written to disk.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, then the screenshot is not written to disk, and the message in the event will be posted\nto the player's chat.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see Screenshot",
	"whodoesthat.events.net.neoforged.neoforge.client.event.SelectMusicEvent": "Fired when the §anet.minecraft.client.sounds.MusicManager§r checks what situational music should be used. This fires before the music begins playing.\n\nIf the music is set to §bnull§r by a modder, it will cancel any music that was already playing.\n\nNote that the higher priority you make your event listener, the earlier the music will be set.\n\nBecause of this, if you want your music to take precedence over others (perhaps you want to have seperate nighttime music for a biome for instance) then you may want it to have a lower priority.\n\nTo make your music instantly play rather than waiting for the playing music to stop, set the music to one that §cis set to replace the current music.§r\n\nHigher priorities would likely be better suited for biome-based or dimension-based musics, whereas lower priority is likely good for specific structures or situations.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\n\nIf the event is canceled, then whatever the latest music set was will be used as the music.\n\nThis event is fired on the §cmain Forge event bus§r,\n\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.TextureAtlasStitchedEvent": "Fired after a texture atlas is stitched together and all textures therein have been loaded.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.\n@see TextureAtlas",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ToastAddEvent": "Fired when the client queues a §aToast§r message to be shown onscreen.\nToasts are small popups that appear on the top right of the screen, for certain actions such as unlocking Advancements and Recipes.\nThis event is §ccancellable§r, and does not §chave a result§r.\nCancelling the event stops the toast from being queued, which means it never renders.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ViewportEvent": "Fired for hooking into the entity view rendering in §aGameRenderer§r.\nThese can be used for customizing the visual features visible to the player.\nSee the various subclasses for listening to different features.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see RenderFog\n@see ComputeFogColor\n@see ComputeCameraAngles\n@see ComputeFov",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ViewportEvent$ComputeCameraAngles": "Fired to allow altering the angles of the player's camera.\nThis can be used to alter the player's view for different effects, such as applying roll.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ViewportEvent$ComputeFogColor": "Fired for customizing the color of the fog visible to the player.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ViewportEvent$ComputeFov": "Fired for altering the raw field of view (FOV).\nThis is after the FOV settings are applied, and before modifiers such as the Nausea effect.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see ComputeFovModifierEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.ViewportEvent$RenderFog": "Fired for rendering custom fog. The plane distances are based on the player's render distance.\nThis event is §ccancellable§r, and §chas a result§r. \n\nThe event must be cancelled for any changes to the plane distances to take effect.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.sound.PlaySoundEvent": "Fired when a sound is about to be played by the sound engine. This fires before the sound is played and before any\nchecks on the sound (such as a zeroed volume, an empty §anet.minecraft.client.resources.sounds.Sound§r, and\nothers). This can be used to change or prevent (by passing §bnull)§r a sound from being played through\n§a#setSound(SoundInstance)§r).\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlaySoundSourceEvent\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.sound.PlaySoundSourceEvent": "Fired when a non-streaming sound is being played. A non-streaming sound is loaded fully into memory\nin a buffer before being played, and used for most sounds of short length such as sound effects for clicking\nbuttons.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.sound.PlayStreamingSourceEvent": "Fired when a streaming sound is being played. A streaming sound is streamed directly from its source\n(such as a file), and used for sounds of long length which are unsuitable to keep fully loaded in-memory in a buffer\n(as is done for regular non-streaming sounds), such as background music or music discs.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.sound.SoundEngineLoadEvent": "Fired when the §aSoundEngine§r is constructed or (re)loaded, such as during game initialization or when the sound\noutput device is changed.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.event.sound.SoundEvent": "Superclass for sound related events.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see SoundSourceEvent\n@see PlaySoundEvent\n@see SoundEngineLoadEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.event.sound.SoundEvent$SoundSourceEvent": "Superclass for when a sound has started to play on an audio channel.\nThese events are fired on the §cmain Forge event bus§r,\nonly on the §clogical client§r.\n@see PlaySoundSourceEvent\n@see PlayStreamingSourceEvent",
	"whodoesthat.events.net.neoforged.neoforge.client.extensions.common.RegisterClientExtensionsEvent": "Allows registering client extensions for various game objects.\nThis event is not §ccancellable§r.\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.client.gui.map.RegisterMapDecorationRenderersEvent": "Allows users to register custom §cdecoration renderers§r for §aMapDecoration§rs\nwhich require more dynamic rendering than a single texture on the map decoration atlas allows.\nThis event is not §ccancellable§r\nThis event is fired on the mod-specific event bus, only on the §clogical client§r.",
	"whodoesthat.events.net.neoforged.neoforge.common.world.chunk.RegisterTicketControllersEvent": "Fired in order to register chunk §aTicketController ticket controllers§r.\nThis event is fired on the mod-specific event bus.",
	"whodoesthat.events.net.neoforged.neoforge.entity.XpOrbTargetingEvent": "Event to determine which player an XP Orb should follow.\n\nThis is fired once a second when an XP Orbit find itself without a player to move toward.\n\nThe default (nearest player within §a#getScanDistance()§r) can be overridden with\neither a new (Fake)Player or null to cancel the attraction.\n\nNote that providing a player that is more than 8 blocks away does work, but it will\ncause this event to be fired again after 20 ticks.\n\nSee also: §aPlayerXpEvent.PickupXp§r for cancelling the pickup.\n\nThis event is fired on both server and client on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.AddPackFindersEvent": "Fired on §aPackRepository§r creation to allow mods to add new pack finders.",
	"whodoesthat.events.net.neoforged.neoforge.event.AddReloadListenerEvent": "The main ResourceManager is recreated on each reload, just after §aReloadableServerResources§r's creation.\nThe event is fired on each reload and lets modders add their own ReloadListeners, for server-side resources.\nThe event is fired on the §aNeoForge#EVENT_BUS§r",
	"whodoesthat.events.net.neoforged.neoforge.event.AnvilUpdateEvent": "AnvilUpdateEvent is fired whenever the input stacks (left or right) or the name in an anvil changed. \n\nIt is called from §aAnvilMenu#createResult()§r. \n\nIf the event is canceled, vanilla behavior will not run, and the output will be set to §aItemStack#EMPTY§r. \n\nIf the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. \n\nif the output is empty, and the event is not canceled, vanilla behavior will execute. ",
	"whodoesthat.events.net.neoforged.neoforge.event.BlockEntityTypeAddBlocksEvent": "Allows injecting new blocks into a block entity's §aBlockEntityType#validBlocks§r field in a safe manner.\nThe class of the newly injected block should share the highest common class that all existing blocks in the targeted validBlocks has.\nPlease use this event instead of manipulating §aBlockEntityType§r directly.\n\nExample: If the valid blocks list has §centry and {@linkplain WallSignBlock§r entry, the common class is §cthe given block must be a {@linkplain SignBlock§r or have §aSignBlock§r as a parent class in its hierarchy. Example:\n{@snippet :\npublic static void onBlockEntityValidBlocks(BlockEntityTypeAddBlocksEvent event) {\nevent.modify(BlockEntityType.SIGN, MODDED_SIGN_BLOCK.get());\n}\n}",
	"whodoesthat.events.net.neoforged.neoforge.event.BuildCreativeModeTabContentsEvent": "Fired when the contents of a specific creative mode tab are being populated in §aCreativeModeTab#buildContents(CreativeModeTab.ItemDisplayParameters)§r.\n\nThis event may be fired multiple times if the operator status of the local player or enabled feature flags changes.\n\nIn vanilla, this is only fired on the logical client, but mods may request creative mode tab contents on the server.",
	"whodoesthat.events.net.neoforged.neoforge.event.CommandEvent": "CommandEvent is fired after a command is parsed, but before it is executed.\nThis event is fired during the invocation of §aCommands#performCommand(ParseResults, String)§r.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the command will not be executed.\n\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.DifficultyChangeEvent": "DifficultyChangeEvent is fired when difficulty is changing. \n\nThis event is fired via the §aCommonHooks#onDifficultyChange(Difficulty, Difficulty)§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.GameShuttingDownEvent": "A simple marker event that notifies when the game is about to close.\nFires once on the physical client and physical server.\nDoes not fire for the Integrated Server on a physical Client.\nOn the client, the GL Context is still valid when the event is fired.\nFired on the FORGE event bus.\n@author Curle",
	"whodoesthat.events.net.neoforged.neoforge.event.GrindstoneEvent$OnPlaceItem": "This event is §aICancellableEvent§r \n\n§aOnPlaceItem§r is fired when the inputs to a grindstone are changed. \nThe following rules apply:\n\nIf the event is canceled, vanilla behavior will not run, and the output will be §cempty§r.\nIf the event is not canceled\n\nand the output is empty, the output will be determined by vanilla.\nand the output is not empty, the output will be set, without running vanilla behavior.\n\nVanilla XP calculation logic will be used unless all of the following criterias are met:\n\nthe amount of experience is greater than or equal to §b0§r;\nthe event is not §ccanceled§r;\nthe §coutput§r is not empty.",
	"whodoesthat.events.net.neoforged.neoforge.event.GrindstoneEvent$OnTakeItem": "This event is §aICancellableEvent§r \n\n§aOnTakeItem§r is fired when the output in a grindstone are is taken. \n\nIt is called from §aGrindstoneMenu#GrindstoneMenu(int, Inventory)§r. \n\nIf the event is canceled, vanilla behavior will not run, and no inputs will be consumed. \n\nif the amount of experience is larger than or equal 0, the vanilla behavior for calculating experience will not run. ",
	"whodoesthat.events.net.neoforged.neoforge.event.ItemAttributeModifierEvent": "This event is fired when the attributes for an item stack are queried (for any reason) through §aItemStack#getAttributeModifiers()§r.\n\nThis event is fired regardless of if the stack has §aDataComponents#ATTRIBUTE_MODIFIERS§r or not. If your attribute should be\nignored when attributes are overridden, you can check for the presence of the component.\n\nThis event may be fired on both the logical server and logical client.",
	"whodoesthat.events.net.neoforged.neoforge.event.ItemStackedOnOtherEvent": "This event provides the functionality of the pair of functions used for the Bundle, in one event:\n\n§aItem#overrideOtherStackedOnMe(ItemStack, ItemStack, Slot, ClickAction, Player, SlotAccess)§r\n§aItem#overrideStackedOnOther(ItemStack, Slot, ClickAction, Player)§r\nThis event is fired before either of the above are called, when a carried item is clicked on top of another in a GUI slot.\nThis event (and items stacking on others in general) is fired on both §csides§r, but only on §cthe client§r in the creative menu.\nPractically, that means that listeners of this event should require the player to be in survival mode if using capabilities that are not synced.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the container's logic halts, the carried item and the slot will not be swapped, and handling is assumed to have been done by the mod.\nThis also means that the two vanilla checks described above will not be called.",
	"whodoesthat.events.net.neoforged.neoforge.event.LootTableLoadEvent": "Fired when a §aLootTable§r is loaded from JSON.\nCan be used to modify the loot table, cancel loading it, or outright replace it.\nThis event is currently fired for all loot tables coming from vanilla, mods, and user datapacks.\nThis event is fired whenever server resources are loaded or reloaded.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the loot table will be made empty.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.ModMismatchEvent": "Fires when the mod loader is in the process of loading a world that was last saved\nwith mod versions that differ from the currently-loaded versions. This can be used to\nenqueue work to run at a later point, such as multi-file migration of data.\nNote that level and world information has not yet been fully loaded; as such, it is\nunsafe to access server or level information during handling of this event.\nThis event is not §ccancellable§r, and does not §chave a result§r.\n\nThis event is fired on the mod-specific event bus, on both §clogical sides§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.ModifyDefaultComponentsEvent": "The event used to modify the default §ccomponents§r of an item. \n\nThis event is fired on the §aModContainer#getEventBus() mod event bus§r.\n\nExample usage:\n{@snippet :\nimport net.minecraft.core.component.DataComponents;\nimport net.minecraft.world.item.Items;\npublic void modifyComponents(ModifyDefaultComponentsEvent event) {\nevent.modify(Items.MELON_SEEDS, builder -> builder\n.set(DataComponents.MAX_STACK_SIZE, 16)); // Stack melon seeds to at most 16 items\nevent.modify(Items.APPLE, builder -> builder\n.remove(DataComponents.FOOD)); // Remove the ability of eating apples\n}\n// Lowest priority listener\npublic void modifyComponentsLow(ModifyDefaultComponentsEvent event) {\nevent.modifyMatching(item -> item.components().has(DataComponents.FIRE_RESISTANT), builder -> builder\n.set(DataComponents.ENCHANTMENT_GLINT_OVERRIDE, true)); // Make all fire resistant items have a glint\n}\n}",
	"whodoesthat.events.net.neoforged.neoforge.event.OnDatapackSyncEvent": "Fires when a player joins the server or when the reload command is ran,\nbefore tags and crafting recipes are sent to the client. Send datapack data\nto clients when this event fires.",
	"whodoesthat.events.net.neoforged.neoforge.event.PlayLevelSoundEvent": "PlayLevelSoundEvent is fired when a sound is played on a §aLevel§r.\nThis event is fired from §aLevel#playSound§r, §aLevel#playSeededSound§r, and §aLocalPlayer#playSound§r.\n\n§a#getLevel()§r contains the level the sound is being played in.\n§a#getSound()§r contains the sound event to be played.\n§a#getOriginalVolume()§r contains the original volume for the sound to be played at.\n§a#getOriginalPitch()§r contains the original pitch for the sound to be played at.\n§a#getNewVolume()§r contains the volume the sound will be played at.\n§a#getNewPitch()§r contains the pitch the sound will be played at.\n\nThis event is §aICancellableEvent cancelable§r.\nIf this event is canceled, the sound is not played.\n\nThis event does not have a result.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.PlayLevelSoundEvent$AtEntity": "PlayLevelSoundEvent.AtEntity is fired when a sound is played on the §aLevel§r at an §aEntity Entity§r's position.\nThis event is fired from §aLevel#playSound§r, §aLevel#playSeededSound§r, and §aLocalPlayer#playSound§r.\n\nThis event is §aICancellableEvent cancelable§r.\nIf this event is canceled, the sound is not played.\n\nThis event does not have a result.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.PlayLevelSoundEvent$AtPosition": "PlayLevelSoundEvent.AtPosition is fired when a sound is played on the §aLevel§r at a specific position.\nThis event is fired from §aLevel#playSound§r and §aLevel#playSeededSound§r.\n\nThis event is §aICancellableEvent cancelable§r.\nIf this event is canceled, the sound is not played.\n\nThis event does not have a result.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.RegisterCommandsEvent": "Commands are rebuilt whenever §aReloadableServerResources§r is recreated.\nYou can use this event to register your commands whenever the §aCommands§r class in constructed.\nThe event is fired on the §aNeoForge#EVENT_BUS§r",
	"whodoesthat.events.net.neoforged.neoforge.event.RegisterGameTestsEvent": "Game tests are registered on client or server startup.\nIt is only run once for a given instance of the game if §aGameTestHooks#isGametestEnabled§r returns true.\nThis is the preferred way to register your game tests.\n\nFired on the Mod bus, see §aIModBusEvent§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.RegisterStructureConversionsEvent": "Fired for registering structure conversions for pre-1.18.2 worlds. This is used by §aStructuresBecomeConfiguredFix§r\nfor converting old structure IDs in pre-1.18.2 worlds to their new equivalents, which can be differentiated per biome.\nBy default, structures whose old ID has a namespace which is not equal to {@value ResourceLocation#DEFAULT_NAMESPACE}\nwill be assumed to belong to a modded structure and will be used as the new ID. Mods may choose to register structure\nconversions for their structures, if they wish to override this default behavior.\nThis event will only fire if §aStructuresBecomeConfiguredFix§r is used, as a result of converting a\npre-1.18.2 world to the current version.\nThis event is not §ccancelable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r. \n@see StructuresBecomeConfiguredFix\n@see #register(String, StructuresBecomeConfiguredFix.Conversion)",
	"whodoesthat.events.net.neoforged.neoforge.event.ServerChatEvent": "This event is fired whenever a §aServerboundChatPacket§r is received from a client\nwho has submitted their chat message.\n\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf the event is cancelled, the message will not be sent to clients.\n\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.StatAwardEvent": "Fired when a §aPlayer§r is awarded a §aStat§r. This event is fired in §aPlayer#awardStat(Stat, int)§r\n\nThis event is §aICancellableEvent cancelable§r.\n\nThis event does not have a result.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.TagsUpdatedEvent": "Fired when tags are updated on either server or client. This event can be used to refresh data that depends on tags.",
	"whodoesthat.events.net.neoforged.neoforge.event.VanillaGameEvent": "VanillaGameEvent is fired on the server whenever one of Vanilla's §aGameEvent GameEvents§r fire. \n\nThis allows for listening to Vanilla's events in a more structured and global way that is not tied to needing a block entity listener. \n\nThis event is fired on the §aNeoForge#EVENT_BUS§r. \n\nCancel this event to prevent Vanilla from posting the §aGameEvent§r to all nearby §anet.minecraft.world.level.gameevent.GameEventListener GameEventListeners§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.brewing.PlayerBrewedPotionEvent": "This event is called when a player picks up a potion from a brewing stand.",
	"whodoesthat.events.net.neoforged.neoforge.event.brewing.RegisterBrewingRecipesEvent": "Event to register new brewing recipes.\nFired on both client and server side, on the main event bus.",
	"whodoesthat.events.net.neoforged.neoforge.event.enchanting.GetEnchantmentLevelEvent": "This event is fired whenever the enchantment level of a particular item is requested for gameplay purposes.\n\nIt is called from §aIItemStackExtension#getEnchantmentLevel(Enchantment)§r and §aIItemStackExtension#getAllEnchantments()§r.\n\nIt is not fired for interactions with NBT, which means these changes will not reflect in the item tooltip.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityAttributeCreationEvent": "EntityAttributeCreationEvent.\n\nUse this event to register attributes for your own EntityTypes.\nThis event is fired after registration and before common setup.\n\nFired on the Mod bus §aIModBusEvent§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityAttributeModificationEvent": "EntityAttributeModificationEvent.\n\nUse this event to add attributes to existing entity types.\nThis event is fired after registration and before common setup, and after §aEntityAttributeCreationEvent§r\n\nFired on the Mod bus §aIModBusEvent§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityEvent": "EntityEvent is fired when an event involving any Entity occurs.\n\nIf a method utilizes this §anet.neoforged.bus.api.Event§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#entity§r contains the entity that caused this event to occur.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityEvent$EnteringSection": "This event is fired on server and client after an Entity has entered a different section. \n\nSections are 16x16x16 block grids of the world.\n\nThis event does not fire when a new entity is spawned, only when an entity moves from one section to another one.\nUse §aEntityJoinLevelEvent§r to detect new entities joining the world.\n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityEvent$EntityConstructing": "EntityConstructing is fired when an Entity is being created. \n\nThis event is fired within the constructor of the Entity.\n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityEvent$Size": "Fired whenever the entity's §aPose§r changes for manipulating the resulting §aEntityDimensions§r.\nNote: This event is fired from the §bEntity§r constructor, and therefore the entity instance\nmight not be fully initialized. Be cautious in using methods and fields from the instance, and check\n§aEntity#isAddedToLevel()§r or §aEntity#firstTick§r.\nThis event is not §ccancellable§r, and is fired on the\n§cgame event bus§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityInvulnerabilityCheckEvent": "Fired when §aEntity#isInvulnerableTo(DamageSource)§r is invoked and determines if\ndownstream hurt logic should apply. This event is fired on both sides in\n§aEntity#isInvulnerableTo(DamageSource)§r\n\nNote: This event may be unable to change the invulnerable status of some entities\nthat override isInvulnerableTo against certain damage sources",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityJoinLevelEvent": "This event is fired whenever an §aEntity§r joins a §aLevel§r.\nThis event is fired whenever an entity is added to a level in §aLevel#addFreshEntity(Entity)§r\nand §bPersistentEntitySectionManager#addNewEntity(Entity, boolean)§r.\n\nNote: This event may be called before the underlying §aLevelChunk§r is promoted to §aChunkStatus#FULL§r.\nYou will cause chunk loading deadlocks if you do not delay your world interactions.\n\nThis event is §ccancellable§r and does not §chave a result§r.\nIf the event is canceled, the entity will not be added to the level.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent": "This event is fired whenever an §aEntity§r leaves a §aLevel§r.\nThis event is fired whenever an entity is removed from the level in §aLevelCallback#onTrackingEnd(Object)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityMobGriefingEvent": "EntityMobGriefingEvent is fired when mob griefing is about to occur and allows an event listener to specify whether it should or not.\n\nThis event is fired when ever the §cmob griefing game rule§r is checked.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityMountEvent": "This event gets fired whenever a entity mounts/dismounts another entity.\n\nentityBeingMounted can be null, be sure to check for that.\n\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r.\n\nIf this event is canceled, the entity does not mount/dismount the other entity.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityStruckByLightningEvent": "EntityStruckByLightningEvent is fired when an Entity is about to be struck by lightening.\n\nThis event is fired whenever an EntityLightningBolt is updated to strike an Entity in\n§aLightningBolt#tick()§r via §aEventHooks#onEntityStruckByLightning(Entity, LightningBolt)§r.\n\n§a#lightning§r contains the instance of EntityLightningBolt attempting to strike an entity.\n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the Entity is not struck by the lightening.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTeleportEvent": "EntityTeleportEvent is fired when an event involving any teleportation of an Entity occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#getTarget()§r contains the target destination.\n\n§a#getPrev()§r contains the entity's current position.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTeleportEvent$ChorusFruit": "EntityTeleportEvent.ChorusFruit is fired before a LivingEntity is teleported due to consuming Chorus Fruit.\n\nThis event is §aICancellableEvent§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTeleportEvent$EnderEntity": "EntityTeleportEvent.EnderEntity is fired before an Enderman or Shulker randomly teleports.\n\nThis event is §aICancellableEvent§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTeleportEvent$EnderPearl": "EntityTeleportEvent.EnderPearl is fired before an Entity is teleported from an EnderPearlEntity.\n\nThis event is §aICancellableEvent§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTeleportEvent$SpreadPlayersCommand": "EntityTeleportEvent.SpreadPlayersCommand is fired before a living entity is teleported\nfrom use of §anet.minecraft.server.commands.SpreadPlayersCommand§r.\n\nThis event is §aICancellableEvent§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTeleportEvent$TeleportCommand": "EntityTeleportEvent.TeleportCommand is fired before a living entity is teleported\nfrom use of §anet.minecraft.server.commands.TeleportCommand§r.\n\nThis event is §aICancellableEvent§r.\n\nIf the event is not canceled, the entity will be teleported.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.\n\nThis event is only fired on the §aLogicalSide#SERVER§r side.\n\nIf this event is canceled, the entity will not be teleported.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.EntityTravelToDimensionEvent": "EntityTravelToDimensionEvent is fired before an Entity travels to a dimension.\n\n§a#dimension§r contains the id of the dimension the entity is traveling to.\n\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r.\n\nIf this event is canceled, the Entity does not travel to the dimension.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.ProjectileImpactEvent": "This event is fired on the §aNeoForge#EVENT_BUS§r.\n\nThis event is fired when a projectile entity impacts something.\n\nThis event is fired via §aEventHooks#onProjectileImpact(Projectile, HitResult)§r\nThis event is fired for all vanilla projectiles by Forge,\ncustom projectiles should fire this event and check the result in a similar fashion.\nThis event is cancelable. When canceled, the impact will not be processed and the projectile will continue flying.\nKilling or other handling of the entity after event cancellation is up to the modder.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.RegisterSpawnPlacementsEvent": "This event allows each §aEntityType§r to have a §aSpawnPlacements.SpawnPredicate§r registered or modified.\nSpawn Predicates are checked whenever an §aEntity§r of the given §aEntityType§r spawns in the world naturally.\nIf registering your own entity's spawn placements, you should use §aRegisterSpawnPlacementsEvent#register(EntityType, SpawnPlacementType, Heightmap.Types, SpawnPlacements.SpawnPredicate, Operation)§r\nSo that you ensure that your entity has a heightmap type and placement type registered.\nIf modifying vanilla or another mod's spawn placements, you can use three operations:\nREPLACE: checked first, the last mod to replace the predicate wipes out all other predicates. Listen with a low §aEventPriority§r if you need to do this.\nOR: checked second, only one of these predicates must pass along with the original predicate\nAND: checked third, these predicates must all pass along with the original predicate\nThis event is not §ccancellable§r and does not §chave a result§r.\nFired on the Mod bus §aIModBusEvent§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.item.ItemEvent": "Base class for all §aItemEntity§r events. Contains a reference to the\nItemEntity of interest. For most ItemEntity events, there's little to no\nadditional useful data from the firing method that isn't already contained\nwithin the ItemEntity instance.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.item.ItemExpireEvent": "Event that is fired when an §aItemEntity§r's age has reached its maximum\nlifespan. Adding extra life time will prevent the §aItemEntity§r from being\nflagged as dead, thus staying its removal from the world.\n\nNote that using this event, you can ony extend the lifespan up to §aShort#MAX_VALUE§r - 1 ticks (27.5 minutes).\nTo extend an item's lifespan above that, use either §aItemEntity#setExtendedLifetime()§r\nor §aItemEntity#setUnlimitedLifetime§r.\n\nThis event will only be fired server-side.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.item.ItemTossEvent": "Event that is fired whenever a player tosses (Q) an item or drag-n-drops a\nstack of items outside the inventory GUI screens. Canceling the event will\nstop the items from entering the world, but will not prevent them being\nremoved from the inventory - and thus removed from the system.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.AnimalTameEvent": "This event is fired when an §aAnimal§r is tamed. \n\nIt is fired via §aEventHooks#onAnimalTame(Animal, Player)§r.\nForge fires this event for applicable vanilla animals, mods need to fire it themselves.\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r. If canceled, taming the animal will fail.\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.ArmorHurtEvent": "Fired on both sides when a §aLivingEntity§r's armor is dealt damage in\n§aLivingEntity#doHurtEquipment(DamageSource, float, EquipmentSlot...) doHurtEquipment§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.EffectParticleModificationEvent": "Fires for each effect to allow modification or replacement of the particle options (you can set it to null to reset it to default).\n\nThis event is not §aICancellableEvent§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.EnderManAngerEvent": "This event is fired on the forge bus before an Enderman detects that a player is looking at them.\nIt will not be fired if the detection is already prevented by §aIItemExtension#isEnderMask§r\n\nThis event is §aICancellableEvent§r.\nIf this event is canceled, the Enderman will not target the player.\n\nThis event does not have a §aResult§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.FinalizeSpawnEvent": "This event is fired before §aMob#finalizeSpawn§r is called.\n\nThis allows mods to control mob initialization.\n\nIn vanilla code, this event is injected by a transformer and not via patch, so calls cannot be traced via call hierarchy (it is not source-visible).\n\nCanceling this event will result in §aMob#finalizeSpawn§r not being called, and the returned value always being null, instead of propagating the SpawnGroupData.\n\nThe entity will still be spawned. If you want to prevent the spawn, use §aFinalizeSpawnEvent#setSpawnCancelled§r, which will cause Forge to prevent the spawn.\n\nThis event is fired on §aNeoForge#EVENT_BUS§r, and is only fired on the logical server.\n@see EventHooks#onFinalizeSpawn\n@apiNote Callers do not need to check if the entity's spawn was cancelled, as the spawn will be blocked by Forge.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingBreatheEvent": "LivingBreatheEvent is fired whenever a living entity ticks.\n\nThis event is fired via §aCommonHooks#onLivingBreathe(LivingEntity, int, int)§r.\n\nThis event is not §aICancellableEvent§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on §aNeoForge#EVENT_BUS§r",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingChangeTargetEvent": "This event allows you to change the target an entity has. \n\nThis event is fired before §aLivingSetAttackTargetEvent§r. \n\nThis event is fired via the §aCommonHooks#onLivingChangeTarget(LivingEntity, LivingEntity, ILivingTargetType)§r\n\n§a#getOriginalAboutToBeSetTarget()§r returns the target that should originally be set.\nThe return value cannot be affected by calling §a#setNewAboutToBeSetTarget(LivingEntity)§r.\n\n§a#getNewAboutToBeSetTarget()§r returns the new target that this entity will have.\nThe return value can be affected by calling §a#setNewAboutToBeSetTarget(LivingEntity)§r.\n\n§a#getTargetType()§r returns the target type that caused the change of targets.\n\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r.\n\nIf you cancel this event, the target will not be changed and it will stay the same.\nCancelling this event will prevent §aLivingSetAttackTargetEvent§r from being posted.\n\nThis event does not have a result. §aEvent.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingDamageEvent": "LivingDamageEvent captures an entity's loss of health. At this stage in\nthe damage sequence, all reduction effects have been applied.\n\n§aPre§r allows for modification of the damage value before it is applied\nto the entity's health.\n\n§aPost§r contains an immutable representation of the entire damage sequence\nand allows for reference to the values accrued at each step.\n@see DamageContainer for more information on the damage sequence",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingDeathEvent": "LivingDeathEvent is fired when an Entity dies. \n\nThis event is fired whenever an Entity dies in\n§aLivingEntity#die(DamageSource)§r,\n§aPlayer#die(DamageSource)§r, and\n§aServerPlayer#die(DamageSource)§r. \n\nThis event is fired via the §aCommonHooks#onLivingDeath(LivingEntity, DamageSource)§r.\n\n§a#source§r contains the DamageSource that caused the entity to die. \n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the Entity does not die.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingDestroyBlockEvent": "Fired when the ender dragon or wither attempts to destroy a block and when ever a zombie attempts to break a door. Basically a event version of §aBlock#canEntityDestroy(BlockState, BlockGetter, BlockPos, Entity)§r\n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the block will not be destroyed.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingDropsEvent": "LivingDropsEvent is fired when an Entity's death causes dropped items to appear.\n\nThis event is fired whenever an Entity dies and drops items in\n§aLivingEntity#die(DamageSource)§r.\n\nThis event is fired via the §aCommonHooks#onLivingDrops(LivingEntity, DamageSource, Collection, int, boolean)§r .\n\n§a#source§r contains the DamageSource that caused the drop to occur.\n\n§a#drops§r contains the ArrayList of EntityItems that will be dropped.\n\n§a#lootingLevel§r contains the amount of loot that will be dropped.\n\n§a#recentlyHit§r determines whether the Entity doing the drop has recently been damaged.\n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the Entity does not drop anything.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingDrownEvent": "LivingDrownEvent is fired whenever a living entity can't breathe and its air supply is less than or equal to zero.\n\nThis event is fired via §aCommonHooks#onLivingBreathe(LivingEntity, int, int)§r.\n\nThis event is §aICancellableEvent§r. Effects of cancellation are noted in §a#setCanceled(boolean)§r.\n\nThis event does not §chave a result§r.\nThis event is fired on §aNeoForge#EVENT_BUS§r",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingEntityUseItemEvent$Finish": "Fired after an item has fully finished being used.\nThe item has been notified that it was used, and the item/result stacks reflect after that state.\nThis means that when this is fired for a Potion, the potion effect has already been applied.\n§aLivingEntityUseItemEvent#item§r is a copy of the item BEFORE it was used.\nIf you wish to cancel those effects, you should cancel one of the above events.\nThe result item stack is the stack that is placed in the player's inventory in replacement of the stack that is currently being used.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingEntityUseItemEvent$Stop": "Fired when a player stops using an item without the use duration timing out.\nExample:\nStop eating 1/2 way through\nStop defending with sword\nStop drawing bow. This case would fire the arrow\nDuration on this event is how long the item had left in it's count down before 'finishing'\nCanceling this event will prevent the Item from being notified that it has stopped being used,\nThe only vanilla item this would effect are bows, and it would cause them NOT to fire there arrow.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingEntityUseItemEvent$Tick": "Fired every tick that a player is 'using' an item, see §aStart§r for info.\nCancel the event, or set the duration to {@literal <=} 0 to cause the player to stop using the item.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingEquipmentChangeEvent": "§aLivingEquipmentChangeEvent§r is fired when the Equipment of a Entity changes. \n\nThis event is fired whenever changes in Equipment are detected in §aLivingEntity#tick()§r. \n\nThis also includes entities joining the World, as well as being cloned. \n\nThis event is fired on server-side only. \n\n§a#slot§r contains the affected §aEquipmentSlot§r. \n\n§a#from§r contains the §aItemStack§r that was equipped previously. \n\n§a#to§r contains the §aItemStack§r that is equipped now. \n\nThis event is not §aICancellableEvent§r. \n\nThis event does not have a result. §aHasResult§r \n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingEvent": "LivingEvent is fired whenever an event involving a §aLivingEntity§r occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingEvent$LivingJumpEvent": "LivingJumpEvent is fired when an Entity jumps.\n\nThis event is fired whenever an Entity jumps in\n§bLivingEntity#jumpFromGround()§r, §bMagmaCube#jumpFromGround()§r,\n§bSlime#jumpFromGround()§r, §bCamel#executeRidersJump()§r,\nand §bAbstractHorse#executeRidersJump()§r.\n\nThis event is fired via the §aCommonHooks#onLivingJump(LivingEntity)§r.\n\nThis event is not §aICancellableEvent§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingExperienceDropEvent": "Event for when an entity drops experience on its death, can be used to change\nthe amount of experience points dropped or completely prevent dropping of experience\nby canceling the event.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingFallEvent": "LivingFallEvent is fired when an Entity is set to be falling.\n\nThis event is fired whenever an Entity is set to fall in\n§aLivingEntity#causeFallDamage(float, float, DamageSource)§r.\n\nThis event is fired via the §aCommonHooks#onLivingFall(LivingEntity, float, float)§r.\n\n§a#distance§r contains the distance the Entity is to fall. If this event is canceled, this value is set to 0.0F.\n\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r.\n\nIf this event is canceled, the Entity does not fall.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingGetProjectileEvent": "This event is fired when a living entity attempts to get a projectile with the\n§aLivingEntity#getProjectile(ItemStack)§r method. The item stack given is usually the item stack of a\n§anet.minecraft.world.item.ProjectileWeaponItem§r and the item stack returned is usually the item stack of a\n§anet.minecraft.world.entity.projectile.Projectile§r.\n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent§r.\n\nThis event does not have a result. §anet.neoforged.bus.api.Event.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingHealEvent": "LivingHealEvent is fired when an Entity is set to be healed. \n\nThis event is fired whenever an Entity is healed in §aLivingEntity#heal(float)§r\n\nThis event is fired via the §aEventHooks#onLivingHeal(LivingEntity, float)§r.\n\n§a#amount§r contains the amount of healing done to the Entity that was healed. \n\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r.\n\nIf this event is canceled, the Entity is not healed.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingIncomingDamageEvent": "LivingIncomingDamageEvent is fired when a LivingEntity is about to receive damage.\n\nThis event is fired in §aLivingEntity#hurt(DamageSource, float)§r\nafter invulnerability checks but before any damage processing/mitigation.\n\nFor custom posting of this event, the event expects to be fired before any\ndamage reductions have been calculated. This event expects a mutable §aDamageContainer§r.\n\nThis event is fired via the §aCommonHooks#onEntityIncomingDamage(LivingEntity, DamageContainer)§r.\n@see DamageContainer for more information on the damage sequence",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingKnockBackEvent": "LivingKnockBackEvent is fired when a living entity is about to be knocked back. \n\nThis event is fired whenever an Entity is knocked back in\n§aLivingEntity#hurt(DamageSource, float)§r,\n§bLivingEntity#blockUsingShield(LivingEntity)§r,\n§aMob#doHurtTarget(Entity)§r and\n§aPlayer#attack(Entity)§r \n\nThis event is fired via §aCommonHooks#onLivingKnockBack(LivingEntity, float, double, double)§r .\n\n§a#strength§r contains the strength of the knock back. \n\n§a#ratioX§r contains the x ratio of the knock back. \n\n§a#ratioZ§r contains the z ratio of the knock back. \n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the entity is not knocked back.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingShieldBlockEvent": "LivingShieldBlockEvent is fired when an entity is hurt and vanilla checks if the entity is attempting\nto block with a shield.\n\nCancelling this event will have the same impact as if the shield was not eligible to block.\n\nThe damage blocked cannot be set lower than zero or greater than the original value.\n\nNote: This event fires whether the player is actively using a shield or not. Vanilla shield\nblocking logic is captured and passed into the event via §a#getOriginalBlock()§r. If this is\ntrue, The shield item stack \"should\" be available from §aLivingEntity#getUseItem()§r at least\nfor players.\n@see DamageContainer for more information on the damage sequence",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingSwapItemsEvent$Hands": "This event is fired when a living entity is about to swap the items in their main and offhand.\nThis event is executed in §aServerGamePacketListenerImpl#handlePlayerAction§r\nThis event is §ccancellable§r, and does not §chave a result§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.LivingUseTotemEvent": "Fired when an Entity attempts to use a totem to prevent its death.\nThis event is §ccancellable§r, and does not §chave a result§r.\nIf this event is cancelled, the totem will not prevent the entity's death.\nThis event is fired on the §cForge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobDespawnEvent": "This event is fired from §aMob#checkDespawn()§r.\n\nIt fires once per tick per mob that is attempting to despawn.\n\nIt is fired for all entities, including §cpersistent§r entities.\nAdditionally, it may be used to keep mobs from despawning in peaceful mode.\n\nThis event is only fired on the logical server.\n@see Mob#checkDespawn()",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobEffectEvent": "This event is fired when an interaction between a §aLivingEntity§r and §aMobEffectInstance§r happens.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobEffectEvent$Added": "This event is fired when a new §aMobEffectInstance§r is added to an entity.\nThis event is also fired if an entity already has the effect but with a different duration or amplifier.\nThis event is not §aICancellableEvent§r.\nThis event does not have a result.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobEffectEvent$Applicable": "This event is fired to check if a §aMobEffectInstance§r can be applied to an entity.\n\nIt will be fired whenever §aLivingEntity#canBeAffected(MobEffectInstance)§r would be invoked.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobEffectEvent$Expired": "This event is fired when a §aMobEffectInstance§r expires on an entity.\nThis event is §aICancellableEvent§r.\nThis event does not have a result.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobEffectEvent$Remove": "This Event is fired when a §aMobEffect§r is about to get removed from an Entity.\nThis Event is §aICancellableEvent§r. If canceled, the effect will not be removed.\nThis Event does not have a result.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobSpawnEvent": "This class holds all events relating to the entire flow of mob spawns.\n\nCurrently, the events have the following flow for any given mob spawn:\n\nBefore the spawn is attempted §aSpawnPlacementCheck§r is fired, to determine if the spawn may occur based on mob-specific rules.\n\nAfter the entity is created §aPositionCheck§r is fired, to determine if the selected position is legal for the entity.\n\nIf both checks succeeded, §aFinalizeSpawn§r is fired, which performs initialization on the newly-spawned entity.\n\nFinally, if the spawn was not cancelled via §aFinalizeSpawn#setSpawnCancelled§r, then §aEntityJoinLevelEvent§r is fired as the entity enters the world.\n\n§aAllowDespawn§r is not related to the mob spawn event flow, as it fires when a despawn is attempted.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobSpawnEvent$PositionCheck": "This event is fired when a mob checks for a valid spawn position, after §aSpawnPlacements#checkSpawnRules§r has been evaluated.\n\nConditions validated here include the following:\n\nObstruction - mobs inside blocks or fluids.\nPathfinding - if the spawn block is valid for pathfinding.\nSea Level - Ocelots check if the position is above sea level.\nSpawn Block - Ocelots check if the below block is grass or leaves.\n\nThis event is only fired on the §clogical server§r.\n@apiNote This event fires after Spawn Placement checks, which are the primary set of spawn checks.\n@see §aRegisterSpawnPlacementsEvent§r To modify spawn placements statically at startup.\n@see §aSpawnPlacementCheck§r To modify the result of spawn placements at runtime.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobSpawnEvent$SpawnPlacementCheck": "This event is fired §cwhen Spawn Placements (aka Spawn Rules) are checked§r, before a mob attempts to spawn.\n\nSpawn Placement checks include light levels, slime chunks, grass blocks for animals, and others in the same vein.\n\nThe purpose of this event is to permit runtime changes to any or all spawn placement logic without having to wrap the placement for each entity.\n\nThis event is only fired on the §clogical server§r.\n\nThis event is not fired for mob spawners which utilize §aCustomSpawnRules§r, as they do not check spawn placements.\n@apiNote If your modifications are for a single entity, and do not vary at runtime, use §aRegisterSpawnPlacementsEvent§r.\n@see RegisterSpawnPlacementsEvent",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.MobSplitEvent": "This event is fired whenever a mob is removed and splits into multiple children. It only fires on the logical server.\n\nIn vanilla, this event is fired by Slimes and Magma Cubes on death, from §aSlime#remove(RemovalReason)§r.\n\nMods may elect to fire this event for any mob that splits on removal.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.living.SpawnClusterSizeEvent": "This event is fired from §aNaturalSpawner#spawnCategoryForPosition§r when the spawning\nsystem determines the maximum amount of the selected entity that can spawn at the same time.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.AdvancementEvent": "Base class used for advancement-related events. Should not be used directly.\n@see AdvancementEarnEvent\n@see AdvancementProgressEvent",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.AdvancementEvent$AdvancementEarnEvent": "Fired when the player earns an advancement. An advancement is earned once its requirements are complete.\nNote that advancements may be hidden from the player or used in background mechanics, such as recipe\nadvancements for unlocking recipes in the recipe book.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.\n@see AdvancementProgress#isDone()",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.AdvancementEvent$AdvancementProgressEvent": "Fired when the player's progress on an advancement criterion is granted or revoked.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.\n@see AdvancementEarnEvent\n@see net.minecraft.server.PlayerAdvancements#award(AdvancementHolder, String)\n@see net.minecraft.server.PlayerAdvancements#revoke(AdvancementHolder, String)",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.AnvilRepairEvent": "Fired when the player removes a \"repaired\" item from the Anvil's Output slot.\nbreakChance specifies as a percentage the chance that the anvil will be \"damaged\" when used.\nItemStacks are the inputs/output from the anvil. They cannot be edited.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.ArrowLooseEvent": "ArrowLooseEvent is fired when a player stops using a bow.\n\nThis event is fired whenever a player stops using a bow in\n§aBowItem#releaseUsing(ItemStack, Level, LivingEntity, int)§r.\n\n§a#bow§r contains the ItemBow ItemStack that was used in this event.\n\n§a#charge§r contains the value for how much the player had charged before stopping the shot.\n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the player does not stop using the bow.\n\nFor crossbows, the charge will always be 1; Set it to -1 in order to prevent firing the arrow. \n\nThis event does not have a result. §aEvent.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.ArrowNockEvent": "ArrowNockEvent is fired when a player begins using a bow.\n\nThis event is fired whenever a player begins using a bow in\n§aBowItem#use(Level, Player, InteractionHand)§r.\n\nThis event is §aICancellableEvent§r.\nCancelling the event causes the action to fail with §anet.minecraft.world.InteractionResult#FAIL§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.AttackEntityEvent": "AttackEntityEvent is fired when a player attacks an Entity.\n\nThis event is fired whenever a player attacks an Entity in\n§aPlayer#attack(Entity)§r.\n\n§a#target§r contains the Entity that was damaged by the player. \n\nThis event is §aICancellableEvent§r.\n\nIf this event is canceled, the player does not attack the Entity.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.BonemealEvent": "This event is called when a player attempts to use bone meal on a block.\n\nThis event can be cancelled, preventing vanilla handling from occurring.\nIf you want to perform custom logic, cancel the event and perform your own handling.\nUse §a#setSuccessful(boolean)§r to control if handling should believe bone meal was used.\n\nThis event is fired on both client and server.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.CanContinueSleepingEvent": "This event is fired when the game checks if a sleeping entity may continue sleeping.\n\nIt can be used to overwrite the vanilla check, forcing the entity to continue or stop sleeping.\n\nThis event is only fired on the logical server.\n@see §aCanPlayerSleepEvent§r for when a player starts sleeping.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.CanPlayerSleepEvent": "Called from §aServerPlayer#startSleepInBed(BlockPos)§r when a player attempts to sleep.\n\nThis event receives the result of vanilla checking if the sleep attempt is valid, and permits overriding it.\n\nThis event is only fired on the logical server.\n@see §aCanContinueSleepingEvent§r for per-tick sleeping checks.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.ClientInformationUpdatedEvent": "ClientInformationUpdatedEvent is fired when a player changes server-synced client options,\nspecifically those in §anet.minecraft.server.level.ClientInformation§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.CriticalHitEvent": "This event is fired when a player attacks an entity in §aPlayer#attack(Entity)§r.\n\nIt can be used to change the critical hit status and the critical damage multiplier.\nAdditionally, this event allows controlling if the critical hit will impact sweep conditions.\n\nThis event is fired on both the logical client and logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.ItemEntityPickupEvent": "Parent class of the two events that fire when a §aPlayer§r collides with an §aItemEntity§r.\n@see ItemEntityPickupEvent.Pre\n@see ItemEntityPickupEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.ItemFishedEvent": "This event is called when a player fishes an item.\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r\nCanceling the event will cause the player to receive no items at all.\nThe hook will still take the damage specified",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PermissionsChangedEvent": "This event will fire when the player is opped or deopped.\n\nThis event is cancelable which will stop the op or deop from happening.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerDestroyItemEvent": "PlayerDestroyItemEvent is fired when a player destroys an item.\n\nThis event is fired whenever a player destroys an item in\n§aMultiPlayerGameMode#destroyBlock(BlockPos)§r,\n§aMultiPlayerGameMode#useItem(Player, InteractionHand)§r,\n§aMultiPlayerGameMode#useItemOn(LocalPlayer, InteractionHand, BlockHitResult)§r ,\n§aPlayer#attack(Entity)§r,\n§bPlayer#hurtCurrentlyUsedShield(float)§r,\n§aPlayer#interactOn(Entity, InteractionHand)§r,\n§aCommonHooks#getCraftingRemainingItem(ItemStack)§r,\n§aServerPlayerGameMode#useItem(ServerPlayer, Level, ItemStack, InteractionHand)§r ,\n§aServerPlayerGameMode#useItemOn(ServerPlayer, Level, ItemStack, InteractionHand, BlockHitResult)§r\nand §aServerPlayerGameMode#destroyBlock(BlockPos)§r.\n\n§a#original§r contains the original ItemStack before the item was destroyed. \n\n(@link #hand) contains the hand that the current item was held in.\n\nThis event is not §aICancellableEvent§r.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired from §aEventHooks#onPlayerDestroyItem(Player, ItemStack, InteractionHand)§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEnchantItemEvent": "This event fires when a player enchants an item, after §aIItemExtension#applyEnchantments§r has been called.\n\nThis event is only fired on the logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent": "PlayerEvent is fired whenever an event involving a §aPlayer§r occurs. \n\nIf a method utilizes this §anet.neoforged.bus.api.Event§r as its parameter, the method will\nreceive every child event of this class.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$BreakSpeed": "BreakSpeed is fired when a player attempts to harvest a block.\n\nThis event is fired whenever a player attempts to harvest a block in\n§aPlayer#getDigSpeed(BlockState, BlockPos)§r.\n\nThis event is fired via the §aEventHooks#getBreakSpeed(Player, BlockState, float, BlockPos)§r.\n\n§a#state§r contains the block being broken. \n\n§a#originalSpeed§r contains the original speed at which the player broke the block. \n\n§a#newSpeed§r contains the newSpeed at which the player will break the block. \n\n§a#pos§r contains the coordinates at which this event is occurring. Optional value.\n\nThis event is §anet.neoforged.bus.api.ICancellableEvent§r.\n\nIf it is canceled, the player is unable to break the block.\n\nThis event does not have a result. §aEvent.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$Clone": "Fired when the EntityPlayer is cloned, typically caused by the impl sending a RESPAWN_PLAYER event.\nEither caused by death, or by traveling from the End to the overworld.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$HarvestCheck": "HarvestCheck is fired when a player attempts to harvest a block.\n\nThis event is fired whenever a player attempts to harvest a block in\n§aPlayer#hasCorrectToolForDrops(BlockState)§r.\n\nThis event is fired via the §aEventHooks#doPlayerHarvestCheck(Player, BlockState, BlockGetter, BlockPos)§r.\n\n§a#state§r contains the §aBlockState§r that is being checked for harvesting. \n\n§a#success§r contains the boolean value for whether the Block will be successfully harvested. \n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent§r.\n\nThis event does not have a result. §aEvent.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$LoadFromFile": "The player is being loaded from the world save. Note that the\nplayer won't have been added to the world yet. Intended to\nallow mods to load an additional file from the players directory\ncontaining additional mod related player data.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$NameFormat": "NameFormat is fired when a player's display name is retrieved.\n\nThis event is fired whenever a player's name is retrieved in\n§aPlayer#getDisplayName()§r or §aPlayer#refreshDisplayName()§r.\n\nThis event is fired via the §aEventHooks#getPlayerDisplayName(Player, Component)§r.\n\n§a#username§r contains the username of the player.\n§a#displayname§r contains the display name of the player.\n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent§r.\n\nThis event does not have a result. §aEvent.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$PlayerChangeGameModeEvent": "Fired when the game type of a server player is changed to a different value than what it was previously. Eg Creative to Survival, not Survival to Survival.\nIf the event is cancelled the game mode of the player is not changed and the value of newGameMode is ignored.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$SaveToFile": "The player is being saved to the world store. Note that the\nplayer may be in the process of logging out or otherwise departing\nfrom the world. Don't assume it's association with the world.\nThis allows mods to load an additional file from the players directory\ncontaining additional mod related player data.\n\nUse this event to save the additional mod related player data to the world.\nWARNING: Do not overwrite the player's .dat file here. You will\ncorrupt the world state.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$StartTracking": "Fired when an Entity is started to be \"tracked\" by this player (the player receives updates about this entity, e.g. motion).",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$StopTracking": "Fired when an Entity is stopped to be \"tracked\" by this player (the player no longer receives updates about this entity, e.g. motion).",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerEvent$TabListNameFormat": "TabListNameFormat is fired when a player's display name for the tablist is retrieved.\n\nThis event is fired whenever a player's display name for the tablist is retrieved in\n§aServerPlayer#getTabListDisplayName()§r or §aServerPlayer#refreshTabListName()§r.\n\nThis event is fired via the §aEventHooks#getPlayerTabListDisplayName(Player)§r.\n\n§a#getDisplayName()§r contains the display name of the player or null if the client should determine the display name itself.\n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent§r.\n\nThis event does not have a result. §aEvent.HasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerFlyableFallEvent": "Occurs when a player falls, but is able to fly. Doesn't need to be cancelable, this is mainly for notification purposes.\n@author Mithion",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerHeartTypeEvent": "Fired by §aGui.HeartType#forPlayer§r to allow mods to change the heart sprite which is displayed in the player's\nhealth bar.\nThis event is fired only on the client.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent": "PlayerInteractEvent is fired when a player interacts in some way.\nAll subclasses are fired on §aNeoForge#EVENT_BUS§r.\nSee the individual documentation on each subevent for more details.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$EntityInteract": "This event is fired on both sides when the player right clicks an entity.\nIt is responsible for all general entity interactions.\nThis event is fired only if the result of the above §aEntityInteractSpecific§r is not §aInteractionResult#SUCCESS§r.\nThis event's state affects whether §aEntity#interact(Player, InteractionHand)§r and\n§aItem#interactLivingEntity(ItemStack, Player, LivingEntity, InteractionHand)§r are called.\nLet result be §aInteractionResult#SUCCESS§r if §aEntity#interact(Player, InteractionHand)§r or\n§aItem#interactLivingEntity(ItemStack, Player, LivingEntity, InteractionHand)§r return true,\nor §a#cancellationResult§r if the event is cancelled.\nIf we are on the client and result is not §aInteractionResult#SUCCESS§r, the client will then try §aRightClickItem§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$EntityInteractSpecific": "This event is fired on both sides whenever a player right clicks an entity.\n\"Interact at\" is an interact where the local vector (which part of the entity you clicked) is known.\nThe state of this event affects whether §aEntity#interactAt(Player, Vec3, InteractionHand)§r is called.\nLet result be the return value of §aEntity#interactAt(Player, Vec3, InteractionHand)§r, or §a#cancellationResult§r if the event is cancelled.\nIf we are on the client and result is not §aInteractionResult#SUCCESS§r, the client will then try §aEntityInteract§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$LeftClickBlock": "This event is fired when a player left clicks while targeting a block.\nThis event controls which of §aBlock#attack(BlockState, Level, BlockPos, Player)§r and/or the item harvesting methods will be called\nCanceling the event will cause none of the above noted methods to be called.\nThere are various results to this event, see the getters below.\nThis event is fired at various points during left clicking on blocks, at both the start and end on the server, and at the start and while held down on the client.\nUse §a#getAction()§r to check which type of action triggered this event.\nNote that if the event is canceled and the player holds down left mouse, the event will continue to fire.\nThis is due to how vanilla calls the left click handler methods.\nAlso note that creative mode directly breaks the block without running any other logic.\nTherefore, in creative mode, §a#setUseBlock§r and §a#setUseItem§r have no effect.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$LeftClickEmpty": "This event is fired on the client side when the player left clicks empty space with any ItemStack.\nThe server is not aware of when the client left clicks empty space, you will need to tell the server yourself.\nThis event cannot be canceled.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$RightClickBlock": "This event is fired on both sides whenever the player right clicks while targeting a block. \n\nThis event controls which of §aItem#onItemUseFirst§r, §aBlock#use(BlockState, Level, BlockPos, Player, InteractionHand, BlockHitResult)§r,\nand §aItem#useOn(UseOnContext)§r will be called. \n\nCanceling the event will cause none of the above three to be called. \n\nLet result be the first non-pass return value of the above three methods, or pass, if they all pass. \n\nOr §a#cancellationResult§r if the event is cancelled. \n\nIf result equals §aInteractionResult#PASS§r, we proceed to §aRightClickItem§r. \n\nThere are various results to this event, see the getters below. \n\nNote that handling things differently on the client vs server may cause desynchronizations!",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$RightClickEmpty": "This event is fired on the client side when the player right clicks empty space with an empty hand.\nThe server is not aware of when the client right clicks empty space with an empty hand, you will need to tell the server yourself.\nThis event cannot be canceled.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerInteractEvent$RightClickItem": "This event is fired on both sides before the player triggers §aItem#use(Level, Player, InteractionHand)§r.\nNote that this is NOT fired if the player is targeting a block §aRightClickBlock§r or entity §aEntityInteract§r §aEntityInteractSpecific§r.\nLet result be the return value of §aItem#use(Level, Player, InteractionHand)§r, or §a#cancellationResult§r if the event is cancelled.\nIf we are on the client and result is not §aInteractionResult#SUCCESS§r, the client will then continue to other hands.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerNegotiationEvent": "This event is fired on the server when a connection has started the Forge handshake,\nForge will wait for all enqueued work to be completed before proceeding further with the login process.\n\nThis event can be used to delay the player login until any necessary work such as preloading user data has completed.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerRespawnPositionEvent": "Fired by §aPlayerList#respawn(ServerPlayer, boolean)§r before the server respawns a player.\nThis may be used to change the §aServerLevel§r the player respawns in, as well as their respawn position.\nThis event is fired after §aBlockState#getRespawnPosition(EntityType, LevelReader, BlockPos, float, LivingEntity)§r is called.\n\nThis event is only fired on the logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerSetSpawnEvent": "This event is fired when a player's spawn point is set or reset.\n\nThe event can be canceled, which will prevent the spawn point from being changed.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerSpawnPhantomsEvent": "This event is fired from §aPhantomSpawner#tick§r when phantoms would attempt to be spawned, with one event fired per player.\nIt allows controlling if a spawn attempt will be made for the particular player, but cannot guarantee that a Phantom will be spawned.\n\nThis event is only fired on the logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerWakeUpEvent": "This event is fired when the player is waking up.\n\nThis is merely for purposes of listening for this to happen.\n\nThere is nothing that can be manipulated with this event.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerXpEvent": "PlayerXpEvent is fired whenever an event involving player experience occurs. \n\nIf a method utilizes this §anet.neoforged.bus.api.Event§r as its parameter, the method will\nreceive every child event of this class.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerXpEvent$LevelChange": "This event is fired when the player's experience level changes through the §aPlayer#giveExperienceLevels(int)§r method.\nIt can be cancelled, and no further processing will be done.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerXpEvent$PickupXp": "This event is fired after the player collides with an experience orb, but before the player has been given the experience.\nIt can be cancelled, and no further processing will be done.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.PlayerXpEvent$XpChange": "This event is fired when the player's experience changes through the §aPlayer#giveExperiencePoints(int)§r method.\nIt can be cancelled, and no further processing will be done.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.SweepAttackEvent": "The SweepAttackEvent is fired when a §aPlayer§r attacks a target, after the §aCriticalHitEvent§r has been fired.\n\nThis event can be used to force an attack to trigger a sweep, or to prevent a sweep from occurring.\n\nThis event is fired on both the logical client and logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.TradeWithVillagerEvent": "Fired when a player trades with an §aAbstractVillager§r.\nThis event is not §ccancellable§r, and does not §chave a result§r.\nThis event is fired on the §cmain Forge event bus§r,\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent": "Fires on both the client and server thread when a player interacts with a block.\nThe event fires in three phases, corresponding with the three interaction behaviors:\n§aIItemExtension#onItemUseFirst§r,\n§aBlockBehaviour#useItemOn§r,\nand §aItem#useOn§r.\nThe event fires after the interaction logic decides to run the particular interaction behavior,\nas opposed to §anet.neoforged.neoforge.event.entity.player.PlayerInteractEvent.RightClickBlock§r\nwhich fires once-per-right-click, before the behavior-choosing logic.\nIf the event is cancelled via §a#cancelWithResult§r,\nthen the normal interaction behavior for that phase will not run,\nand the specified §aInteractionResult§r will be returned instead.",
	"whodoesthat.events.net.neoforged.neoforge.event.furnace.FurnaceFuelBurnTimeEvent": "§aFurnaceFuelBurnTimeEvent§r is fired when determining the fuel value for an ItemStack. \n\nTo set the burn time of your own item, use §aItem#getBurnTime(ItemStack, RecipeType)§r instead.\n\nThis event is fired from §aEventHooks#getItemBurnTime(ItemStack, int, RecipeType)§r.\n\nThis event is §aICancellableEvent§r to prevent later handlers from changing the value.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.AlterGroundEvent": "This event is fired when §aAlterGroundDecorator#placeBlockAt(TreeDecorator.Context, BlockPos)§r attempts to alter a ground block when generating a feature.\n\nAn example of this would be large spruce trees converting grass blocks into podzol.\n\nThis event is not §ccancellable§r.\n\nThis event is fired on the §cmain Forge event bus§r only on the §clogical server§r.\n\nThis event is fired on worker threads, meaning it is unsafe to access external global state.\n\nDoing so may induce §aConcurrentModificationException§r or deadlocks.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockDropsEvent": "Fired when a block is broken and the drops have been determined, but before they have been added to the world. This event can be used to manipulate the dropped items and experience.\n\nNo guarantees can be made about the block. It will either have already been removed from the world, or will be removed after the event terminates.\n\nIf you wish to edit the state of the block in-world, use §aBreakEvent§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$BlockToolModificationEvent": "Fired when a block is right-clicked by a tool to change its state.\nFor example: Used to determine if §aItemAbilities#AXE_STRIP an axe can strip§r,\n§aItemAbilities#SHOVEL_FLATTEN a shovel can path§r, or §aItemAbilities#HOE_TILL a hoe can till§r.\n\nCare must be taken to ensure level-modifying events are only performed if §a#isSimulated()§r returns §bfalse§r.\n\nThis event is §aICancellableEvent§r. If canceled, this will prevent the tool\nfrom changing the block's state.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$BreakEvent": "This event is fired on the server when a player attempts to break a block, upon receipt of a block break packet.\nThe following conditions may cause this event to fire in a cancelled state:\n\nIf §aPlayer#blockActionRestricted§r is true.\nIf the target block is a §aGameMasterBlock§r and §aPlayer#canUseGameMasterBlocks()§r is false.\nIf the the player is holding an item, and §aItem#canAttackBlock§r is false.\nIn the first two cases, un-cancelling the event will not permit the block to be broken.\nIn the third case, un-cancelling will allow the break, bypassing the behavior of §aItem#canAttackBlock§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$EntityMultiPlaceEvent": "Fired when a single block placement triggers the\ncreation of multiple blocks(e.g. placing a bed block). The block returned\nby §a#state§r and its related methods is the block where\nthe placed block would exist if the placement only affected a single\nblock.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$EntityPlaceEvent": "Called when a block is placed.\nIf a Block Place event is cancelled, the block will not be placed.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$FarmlandTrampleEvent": "Fired when when farmland gets trampled\nThis event is §aICancellableEvent§r",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$FluidPlaceBlockEvent": "Fired when a liquid places a block. Use §a#setNewState(BlockState)§r to change the result of\na cobblestone generator or add variants of obsidian. Alternatively, you could execute\narbitrary code when lava sets blocks on fire, even preventing it.\n§a#getState()§r will return the block that was originally going to be placed.\n§a#getPos()§r will return the position of the block to be changed.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$NeighborNotifyEvent": "Fired when a physics update occurs on a block. This event acts as\na way for mods to detect physics updates, in the same way a BUD switch\ndoes. This event is only called on the server.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockEvent$PortalSpawnEvent": "Fired when an attempt is made to spawn a nether portal from\n§aBaseFireBlock#onPlace(BlockState, Level, BlockPos, BlockState, boolean)§r.\nIf cancelled, the portal will not be spawned.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.BlockGrowFeatureEvent": "This event is fired whenever a block (like a sapling) grows into a feature (like a tree).\n\nIn vanilla, this fires for saplings, fungi, mushrooms and azaleas. Mods may fire it for similar blocks.\n\nThis event is only fired on the logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkDataEvent": "ChunkDataEvent is fired when an event involving chunk data occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#data§r contains the NBTTagCompound containing the chunk data for this event.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkEvent": "ChunkEvent is fired when an event involving a chunk occurs.\n\nIf a method utilizes this §aEvent§r as its parameter, the method will\nreceive every child event of this class.\n\n§a#chunk§r contains the Chunk this event is affecting.\n\nAll children of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkTicketLevelUpdatedEvent": "This event is fired whenever a chunk has its ticket level changed via the server's ChunkMap.\n\nThis event does not fire if the new ticket level is the same as the old level, or if both the\nnew AND old ticket levels represent values past the max chunk distance.\n\nDue to how vanilla processes ticket level changes this event may be fired \"twice\" in one tick for the same chunk.\nThe scenario where this happens is when increasing the level from say 31 (ticking) to 32, the way vanilla does it\nis by first changing it from 31 to 46, and then queuing the update from 46 to 32. However, when going from 32 to 31,\nvanilla is able to go directly.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkWatchEvent": "This event is fired whenever a chunk has a watch-related action.\n\nThe §cplayer§r's level may not be the same as the §clevel of the chunk§r\nwhen the player is teleporting to another dimension.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkWatchEvent$Sent": "This event is fired whenever a chunk being watched by a §aServerPlayer§r is transmitted to their client\n(see §anet.minecraft.server.network.PlayerChunkSender#sendNextChunks(ServerPlayer)§r).\n\nThis event may be used to send additional chunk-related data to the client.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkWatchEvent$UnWatch": "This event is fired whenever a §aServerPlayer§r stops watching a chunk. The chunk this event fires for\nmay never have actually been known to the client if the chunk goes out of range before being sent due to\nslow pacing of chunk sync on slow connections or to slow clients.\n\nThis event is fired when a chunk is removed from the watched chunks of an §aServerPlayer§r\nin §anet.minecraft.server.level.ChunkMap#dropChunk(ServerPlayer, ChunkPos)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ChunkWatchEvent$Watch": "This event is fired whenever a §aServerPlayer§r begins watching a chunk and the chunk is queued up for\nsending to the client (see §anet.minecraft.server.level.ChunkMap#markChunkPendingToSend(ServerPlayer, LevelChunk)§r).\n\nThis event must NOT be used to send additional chunk-related data to the client as the client will not be aware\nof the chunk yet when this event fires. §aChunkWatchEvent.Sent§r should be used for this purpose instead\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ExplosionEvent": "ExplosionEvent triggers when an explosion happens in the level.\n\nExplosionEvent.Start is fired before the explosion actually occurs.\n\nExplosionEvent.Detonate is fired once the explosion has a list of affected blocks and entities.\n\nExplosionEvent.Start is §aICancellableEvent§r.\n\nExplosionEvent.Detonate can modify the affected blocks and entities.\n\nChildren do not use §aHasResult§r.\n\nChildren of this event are fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ExplosionEvent$Detonate": "ExplosionEvent.Detonate is fired once the explosion has a list of affected blocks and entities. These lists can be modified to change the outcome.\n\nThis event is not §aICancellableEvent§r.\n\nThis event does not use §aHasResult§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ExplosionEvent$Start": "ExplosionEvent.Start is fired before the explosion actually occurs. Canceling this event will stop the explosion.\n\nThis event is §aICancellableEvent§r.\n\nThis event does not use §aHasResult§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ExplosionKnockbackEvent": "ExplosionKnockbackEvent is fired once the explosion has calculated the knockback velocity to add to the entity caught in blast.\n\nThis event is not §aICancellableEvent§r.\n\nThis event does not use §aHasResult§r.\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.LevelEvent": "This event is fired whenever an event involving a §aLevelAccessor§r occurs.\n\nAll children of this event are fired on the §cmain Forge event bus§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.LevelEvent$CreateSpawnPosition": "This event fires whenever a §aServerLevel§r is initialized for the first time\nand a spawn position needs to be chosen.\n\nThis event is §ccancellable§r and does not §chave a result§r.\nIf the event is canceled, the vanilla logic to choose a spawn position will be skipped.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.\n@see ServerLevelData#isInitialized()",
	"whodoesthat.events.net.neoforged.neoforge.event.level.LevelEvent$Load": "This event is fired whenever a level loads.\nThis event is fired whenever a level loads in ClientLevel's constructor and\n{@literal MinecraftServer#createLevels(ChunkProgressListener)}.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.LevelEvent$PotentialSpawns": "Fired when building a list of all possible entities that can spawn at the specified location.\nIf an entry is added to the list, it needs to be a globally unique instance.\nThe event is called in {@link net.minecraft.world.level.NaturalSpawner#mobsAt(ServerLevel,\nStructureManager, ChunkGenerator, MobCategory, RandomSource, BlockPos)}.\nThis event is §ccancellable§r, and does not §chave a result§r.\nCanceling the event will result in an empty list, meaning no entity will be spawned.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.LevelEvent$Save": "This event fires whenever a level is saved.\nThis event is fired when a level is saved in\n§aServerLevel#save(ProgressListener, boolean, boolean)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\nonly on the §clogical server§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.LevelEvent$Unload": "This event is fired whenever a level unloads.\nThis event is fired whenever a level unloads in\n§aMinecraft#setLevel(ClientLevel)§r,\n§aMinecraftServer#stopServer()§r,\n§aMinecraft#clearLevel(Screen)§r.\n\nThis event is not §ccancellable§r and does not §chave a result§r.\n\nThis event is fired on the §cmain Forge event bus§r\non both logical sides.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.ModifyCustomSpawnersEvent": "This event is fired on the §clogical server§r when a §aServerLevel§r is building its §ccustom spawners§r.\n\nSubscribe to this event to add/remove §ccustom spawners§r for the level.\n\nThis event is not §anet.neoforged.bus.api.ICancellableEvent cancellable§r and does not have a result.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.NoteBlockEvent": "Base class for Noteblock Events",
	"whodoesthat.events.net.neoforged.neoforge.event.level.NoteBlockEvent$Change": "Fired when a Noteblock is changed. You can adjust the note it will change to via §a#setNote(Note, Octave)§r.\nCanceling this event will not change the note and also stop the Noteblock from playing it's note.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.NoteBlockEvent$Play": "Fired when a Noteblock plays it's note. You can override the note and instrument\nCanceling this event will stop the note from playing.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.PistonEvent": "Base piston event, use §aPistonEvent.Post§r and §aPistonEvent.Pre§r",
	"whodoesthat.events.net.neoforged.neoforge.event.level.SleepFinishedTimeEvent": "This event is fired when all players are asleep and the time should be set to day.\nsetWakeUpTime(wakeUpTime) sets a new time that will be added to the dayTime.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.block.CreateFluidSourceEvent": "Fired when a fluid checks if nearby blocks can convert it to a source block.\n\nThis can be used to manipulate if fluids are allowed to create sources dynamically.",
	"whodoesthat.events.net.neoforged.neoforge.event.level.block.CropGrowEvent": "Parent of the two crop growth events.\n@see CropGrowEvent.Pre\n@see CropGrowEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.event.server.ServerAboutToStartEvent": "Called before the server begins loading anything. Called after §aInterModProcessEvent§r on the dedicated\nserver, and after the player has hit \"Play Selected World\" in the client. Called before §aServerStartingEvent§r.\nYou can obtain a reference to the server with this event.\n@author cpw",
	"whodoesthat.events.net.neoforged.neoforge.event.server.ServerStartedEvent": "Called after §aServerStartingEvent§r when the server is available and ready to play.\n@author cpw",
	"whodoesthat.events.net.neoforged.neoforge.event.server.ServerStartingEvent": "Called after §aServerAboutToStartEvent§r and before §aServerStartedEvent§r.\nThis event allows for customizations of the server.\nIf you need to add commands use §aRegisterCommandsEvent§r.\n@author cpw",
	"whodoesthat.events.net.neoforged.neoforge.event.server.ServerStoppedEvent": "Called after §aServerStoppingEvent§r when the server has completely shut down.\nCalled immediately before shutting down, on the dedicated server, and before returning\nto the main menu on the client.\n@author cpw",
	"whodoesthat.events.net.neoforged.neoforge.event.server.ServerStoppingEvent": "Called when the server begins an orderly shutdown, before §aServerStoppedEvent§r.\n@author cpw",
	"whodoesthat.events.net.neoforged.neoforge.event.tick.EntityTickEvent": "Base class of the two entity tick events.\n@see EntityTickEvent.Pre\n@see EntityTickEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.event.tick.LevelTickEvent": "Base class of the two level tick events.\n@see LevelTickEvent.Pre\n@see LevelTickEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.event.tick.PlayerTickEvent": "Base class of the two player tick events.\n\nThese events are separate from §aLivingTickEvent§r due to the semantics of player ticks.\nOn the client, players tick from the usual §aEntity#tick()§r method, but on the server, they rely\non §aServerPlayer#doTick()§r which is called from §aServerGamePacketListenerImpl#tick()§r.\n\nUse of these events should only be necessary if you rely on this specific timing.\n@see PlayerTickEvent.Pre\n@see PlayerTickEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.event.tick.ServerTickEvent": "Base class of the two server tick events.\n@see ServerTickEvent.Pre\n@see ServerTickEvent.Post",
	"whodoesthat.events.net.neoforged.neoforge.event.tick.ServerTickEvent$Post": "§aServerTickEvent.Post§r is fired once per server tick, after the server performs work for the current tick.\n\nThis event only fires on the logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.tick.ServerTickEvent$Pre": "§aServerTickEvent.Pre§r is fired once per server tick, before the server performs work for the current tick.\n\nThis event only fires on the logical server.",
	"whodoesthat.events.net.neoforged.neoforge.event.village.VillageSiegeEvent": "VillageSiegeEvent is fired just before a zombie siege finds a successful location in\n§bVillageSiege#tryToSetupSiege(ServerLevel)§r, to give mods the chance to stop the siege.\n\nThis event is §aICancellableEvent§r; canceling stops the siege.\n\nThis event does not have a result. §aHasResult§r\n\nThis event is fired on the §aNeoForge#EVENT_BUS§r.",
	"whodoesthat.events.net.neoforged.neoforge.event.village.VillagerTradesEvent": "VillagerTradesEvent is fired during reload by §aTagsUpdatedEvent§r. It is used to gather the trade lists for each profession.\nIt is fired on the §aNeoForge#EVENT_BUS§r.\nIt is fired once for each registered villager profession.\nVillagers pick two trades from their trade map, based on their level.\nVillager level is increased by successful trades.\nThe map is populated for levels 1-5 (inclusive), so Map#get will never return null for those keys.\nLevels outside of this range do nothing, as specified by §aVillagerData#canLevelUp(int)§r which is called before attempting to level up.\nTo add trades to the merchant, simply add new trades to the list. §aBasicItemListing§r provides a default implementation.",
	"whodoesthat.events.net.neoforged.neoforge.event.village.WandererTradesEvent": "WandererTradesEvent is fired during reload by §aTagsUpdatedEvent§r. It is used to gather the trade lists for the wandering merchant.\nIt is fired on the §aNeoForge#EVENT_BUS§r.\nThe wandering merchant picks a few trades from §bgeneric§r and a single trade from §brare§r.\nTo add trades to the merchant, simply add new trades to the list. §aBasicItemListing§r provides a default implementation.",
	"whodoesthat.events.net.neoforged.neoforge.fluids.RegisterCauldronFluidContentEvent": "Event to register §aCauldronFluidContent§r for modded cauldrons.\nRegistering cauldrons is done by calling §aCauldronFluidContent#register§r\nand allows all cauldrons registered in this way to interoperate with each other\nwhen accessed via the §aCapabilities.FluidHandler#BLOCK§r capability.",
	"whodoesthat.events.net.neoforged.neoforge.network.event.RegisterConfigurationTasksEvent": "Fired when the server configuration packet listener collects all the configuration tasks\nthat should be run on the server to configure the client.",
	"whodoesthat.events.net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent": "Event fired when the §aNetworkRegistry§r is being set up.\n\nThis event is used to collect all the payload types and their handlers that should be used on the network.\n\nThere are a few base rules for custom payloads:\n\nPayloads should not write their ids within their §aStreamCodec§r, as this will be done automatically.\nPayloads must be registered before they can be sent over the network.\nPayloads may only be sent over the §aConnectionProtocol§r they were registered for.\nBy default, §aPayloadRegistrar§r will wrap handlers so they execute on the main thread instead of the network thread.\nPayloads are always serialized, including for §aConnection#isMemoryConnection() memory connections§r (singleplayer and LAN hosts).",
	"whodoesthat.events.net.neoforged.neoforge.registries.DataPackRegistryEvent$NewRegistry": "Fired when datapack registries can be registered.\nDatapack registries are registries which can only load entries through JSON files from datapacks.\n\nData JSONs will be loaded from §bdata//modid/registryname/§r, where §bmodid§r is the namespace of the registry key.\n\nThis event is not §ccancellable§r, and does not §chave a result§r.\n\nThis event is fired on the mod-specific event bus, on both §clogical sides§r.",
	"whodoesthat.events.net.neoforged.neoforge.registries.IdMappingEvent": "Called whenever the ID mapping might have changed. If you register for this event, you\nwill be called back whenever the client or server loads an ID set. This includes both\nwhen the ID maps are loaded from disk, as well as when the ID maps revert to the initial\nstate.\n\nNote: you cannot change the IDs that have been allocated, but you might want to use\nthis event to update caches or other in-mod artifacts that might be impacted by an ID\nchange.\n\nFired on the §aNeoForge#EVENT_BUS forge bus§r.",
	"whodoesthat.events.net.neoforged.neoforge.registries.ModifyRegistriesEvent": "Fired during startup after builtin registries are constructed.\nFor vanilla registries, this event is fired after vanilla entries are registered but before modded entries.\nFor modded registries, this event is fired before any entry is registered.\nThis event can be used to register §ccallbacks§r to the registry.\nThis event cannot be used to modify datapack registries.\nThis event is not §ccancellable§r.\n\nThis event is fired on the mod-specific event bus, on both §clogical sides§r.\n@see NewRegistryEvent",
	"whodoesthat.events.net.neoforged.neoforge.registries.NewRegistryEvent": "Fired when new registries can be constructed and registered.\nThis event is fired to register builtin registries, like the registries in §aBuiltInRegistries§r.\nBuiltin registries are registries which can only load entries registered in code.\nFor registering datapack registries that only load entries through JSON, see §aDataPackRegistryEvent.NewRegistry§r.\nThis event is fired on the mod-specific event bus, on both §clogical sides§r.\n@see ModifyRegistriesEvent",
	"whodoesthat.events.net.neoforged.neoforge.registries.RegisterEvent": "Fired for each registry when it is ready to have modded objects registered.\nThis event is fired for all builtin registries from vanilla (see §aBuiltInRegistries§r) and mods.\nThis event is fired on the mod-specific event bus, on both §clogical sides§r.\n@see #register(ResourceKey, ResourceLocation, Supplier)\n@see #register(ResourceKey, Consumer)",
	"whodoesthat.events.net.neoforged.neoforge.registries.datamaps.DataMapsUpdatedEvent": "Event fired on the §anet.neoforged.neoforge.common.NeoForge#EVENT_BUS game event bus§r when the data maps of\na registry have either been §csynced to the client§r or §creloaded on the server§r.\n\nThis event can be used to build caches (like weighed lists) or for post-processing the data map values. \n\nRemember however that the data map values should not end up referencing their owner, as they're not copied when attached to tags.",
	"whodoesthat.events.net.neoforged.neoforge.registries.datamaps.RegisterDataMapTypesEvent": "Event fired on the mod event bus, in order to register §aDataMapType data map types§r.",
	"whodoesthat.events.net.neoforged.neoforge.server.permission.events.PermissionGatherEvent": "Fired to gather information for the permissions API, such as the §aIPermissionHandler§r and §aPermissionNode§rs.\n§aHandler§r allows to set a new PermissionHandler\n\n§aNodes§r allows you to register new PermissionNodes\nNote: All PermissionNodes that you want to use, must be registered!",
	"whodoesthat.events.net.neoforged.neoforge.server.permission.events.PermissionGatherEvent$Handler": "Used to register a new PermissionHandler, a server config value exists to choose which one to use.\n\nNote: Create a new instance when registering a PermissionHandler.\nIf you cache it, make sure that your PermissionHandler is actually used after this event.",
	"whodoesthat.events.net.neoforged.neoforge.server.permission.events.PermissionGatherEvent$Nodes": "Used to register your PermissionNodes, every node that you want to use, must be registered!"
}
